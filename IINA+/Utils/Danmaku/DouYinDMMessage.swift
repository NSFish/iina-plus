// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messages: [Message] = []

  var cursor: String = String()

  var fetchInterval: Int64 = 0

  var now: Int64 = 0

  var internalExt: String = String()

  var fetchType: Int32 = 0

  var routeParams: Dictionary<String,String> = [:]

  var heartbeatDuration: Int64 = 0

  var needAck: Bool = false

  var pushServer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var method: String = String()

  var payload: Data = Data()

  var msgID: Int64 = 0

  var msgType: Int32 = 0

  var offset: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RoomUserSeqMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: Common {
    get {return _common ?? Common()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {self._common = nil}

  var ranks: [RoomUserSeqMessage.Contributor] = []

  var total: Int64 = 0

  var popStr: String = String()

  var seats: [RoomUserSeqMessage.Contributor] = []

  var popularity: Int64 = 0

  var totalUser: Int64 = 0

  var totalUserStr: String = String()

  var totalStr: String = String()

  var onlineUserForAnchor: String = String()

  var totalPvForAnchor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Contributor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var score: Int64 = 0

    var user: User {
      get {return _user ?? User()}
      set {_user = newValue}
    }
    /// Returns true if `user` has been explicitly set.
    var hasUser: Bool {return self._user != nil}
    /// Clears the value of `user`. Subsequent reads from it will return its default value.
    mutating func clearUser() {self._user = nil}

    var rank: Int64 = 0

    var delta: Int64 = 0

    var isHidden: Bool = false

    var scoreDescription: String = String()

    var exactlyScore: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _user: User? = nil
  }

  init() {}

  fileprivate var _common: Common? = nil
}

struct GiftMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: Common {
    get {return _storage._common ?? Common()}
    set {_uniqueStorage()._common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return _storage._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {_uniqueStorage()._common = nil}

  var giftID: Int64 {
    get {return _storage._giftID}
    set {_uniqueStorage()._giftID = newValue}
  }

  var fanTicketCount: Int64 {
    get {return _storage._fanTicketCount}
    set {_uniqueStorage()._fanTicketCount = newValue}
  }

  var groupCount: Int64 {
    get {return _storage._groupCount}
    set {_uniqueStorage()._groupCount = newValue}
  }

  var repeatCount: Int64 {
    get {return _storage._repeatCount}
    set {_uniqueStorage()._repeatCount = newValue}
  }

  var comboCount: Int64 {
    get {return _storage._comboCount}
    set {_uniqueStorage()._comboCount = newValue}
  }

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var toUser: User {
    get {return _storage._toUser ?? User()}
    set {_uniqueStorage()._toUser = newValue}
  }
  /// Returns true if `toUser` has been explicitly set.
  var hasToUser: Bool {return _storage._toUser != nil}
  /// Clears the value of `toUser`. Subsequent reads from it will return its default value.
  mutating func clearToUser() {_uniqueStorage()._toUser = nil}

  var repeatEnd: Int32 {
    get {return _storage._repeatEnd}
    set {_uniqueStorage()._repeatEnd = newValue}
  }

  var textEffect: GiftMessage.TextEffect {
    get {return _storage._textEffect ?? GiftMessage.TextEffect()}
    set {_uniqueStorage()._textEffect = newValue}
  }
  /// Returns true if `textEffect` has been explicitly set.
  var hasTextEffect: Bool {return _storage._textEffect != nil}
  /// Clears the value of `textEffect`. Subsequent reads from it will return its default value.
  mutating func clearTextEffect() {_uniqueStorage()._textEffect = nil}

  var groupID: Int64 {
    get {return _storage._groupID}
    set {_uniqueStorage()._groupID = newValue}
  }

  var incomeTaskgifts: Int64 {
    get {return _storage._incomeTaskgifts}
    set {_uniqueStorage()._incomeTaskgifts = newValue}
  }

  var roomFanTicketCount: Int64 {
    get {return _storage._roomFanTicketCount}
    set {_uniqueStorage()._roomFanTicketCount = newValue}
  }

  var priority: GiftIMPriority {
    get {return _storage._priority ?? GiftIMPriority()}
    set {_uniqueStorage()._priority = newValue}
  }
  /// Returns true if `priority` has been explicitly set.
  var hasPriority: Bool {return _storage._priority != nil}
  /// Clears the value of `priority`. Subsequent reads from it will return its default value.
  mutating func clearPriority() {_uniqueStorage()._priority = nil}

  var gift: GiftStruct {
    get {return _storage._gift ?? GiftStruct()}
    set {_uniqueStorage()._gift = newValue}
  }
  /// Returns true if `gift` has been explicitly set.
  var hasGift: Bool {return _storage._gift != nil}
  /// Clears the value of `gift`. Subsequent reads from it will return its default value.
  mutating func clearGift() {_uniqueStorage()._gift = nil}

  var logID: String {
    get {return _storage._logID}
    set {_uniqueStorage()._logID = newValue}
  }

  var sendType: Int64 {
    get {return _storage._sendType}
    set {_uniqueStorage()._sendType = newValue}
  }

  var publicAreaCommon: PublicAreaCommon {
    get {return _storage._publicAreaCommon ?? PublicAreaCommon()}
    set {_uniqueStorage()._publicAreaCommon = newValue}
  }
  /// Returns true if `publicAreaCommon` has been explicitly set.
  var hasPublicAreaCommon: Bool {return _storage._publicAreaCommon != nil}
  /// Clears the value of `publicAreaCommon`. Subsequent reads from it will return its default value.
  mutating func clearPublicAreaCommon() {_uniqueStorage()._publicAreaCommon = nil}

  var trayDisplayText: Text {
    get {return _storage._trayDisplayText ?? Text()}
    set {_uniqueStorage()._trayDisplayText = newValue}
  }
  /// Returns true if `trayDisplayText` has been explicitly set.
  var hasTrayDisplayText: Bool {return _storage._trayDisplayText != nil}
  /// Clears the value of `trayDisplayText`. Subsequent reads from it will return its default value.
  mutating func clearTrayDisplayText() {_uniqueStorage()._trayDisplayText = nil}

  var bannedDisplayEffects: Int64 {
    get {return _storage._bannedDisplayEffects}
    set {_uniqueStorage()._bannedDisplayEffects = newValue}
  }

  var trayInfo: GiftTrayInfo {
    get {return _storage._trayInfo ?? GiftTrayInfo()}
    set {_uniqueStorage()._trayInfo = newValue}
  }
  /// Returns true if `trayInfo` has been explicitly set.
  var hasTrayInfo: Bool {return _storage._trayInfo != nil}
  /// Clears the value of `trayInfo`. Subsequent reads from it will return its default value.
  mutating func clearTrayInfo() {_uniqueStorage()._trayInfo = nil}

  var assetEffectMixInfo: AssetEffectMixInfo {
    get {return _storage._assetEffectMixInfo ?? AssetEffectMixInfo()}
    set {_uniqueStorage()._assetEffectMixInfo = newValue}
  }
  /// Returns true if `assetEffectMixInfo` has been explicitly set.
  var hasAssetEffectMixInfo: Bool {return _storage._assetEffectMixInfo != nil}
  /// Clears the value of `assetEffectMixInfo`. Subsequent reads from it will return its default value.
  mutating func clearAssetEffectMixInfo() {_uniqueStorage()._assetEffectMixInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TextEffect {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var portrait: GiftMessage.TextEffect.Detail {
      get {return _portrait ?? GiftMessage.TextEffect.Detail()}
      set {_portrait = newValue}
    }
    /// Returns true if `portrait` has been explicitly set.
    var hasPortrait: Bool {return self._portrait != nil}
    /// Clears the value of `portrait`. Subsequent reads from it will return its default value.
    mutating func clearPortrait() {self._portrait = nil}

    var landscape: GiftMessage.TextEffect.Detail {
      get {return _landscape ?? GiftMessage.TextEffect.Detail()}
      set {_landscape = newValue}
    }
    /// Returns true if `landscape` has been explicitly set.
    var hasLandscape: Bool {return self._landscape != nil}
    /// Clears the value of `landscape`. Subsequent reads from it will return its default value.
    mutating func clearLandscape() {self._landscape = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Detail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var text: Text {
        get {return _storage._text ?? Text()}
        set {_uniqueStorage()._text = newValue}
      }
      /// Returns true if `text` has been explicitly set.
      var hasText: Bool {return _storage._text != nil}
      /// Clears the value of `text`. Subsequent reads from it will return its default value.
      mutating func clearText() {_uniqueStorage()._text = nil}

      var textFontSize: Int32 {
        get {return _storage._textFontSize}
        set {_uniqueStorage()._textFontSize = newValue}
      }

      var background: Image {
        get {return _storage._background ?? Image()}
        set {_uniqueStorage()._background = newValue}
      }
      /// Returns true if `background` has been explicitly set.
      var hasBackground: Bool {return _storage._background != nil}
      /// Clears the value of `background`. Subsequent reads from it will return its default value.
      mutating func clearBackground() {_uniqueStorage()._background = nil}

      var start: Int32 {
        get {return _storage._start}
        set {_uniqueStorage()._start = newValue}
      }

      var duration: Int32 {
        get {return _storage._duration}
        set {_uniqueStorage()._duration = newValue}
      }

      var x: Int32 {
        get {return _storage._x}
        set {_uniqueStorage()._x = newValue}
      }

      var y: Int32 {
        get {return _storage._y}
        set {_uniqueStorage()._y = newValue}
      }

      var width: Int32 {
        get {return _storage._width}
        set {_uniqueStorage()._width = newValue}
      }

      var height: Int32 {
        get {return _storage._height}
        set {_uniqueStorage()._height = newValue}
      }

      var shadowDx: Int32 {
        get {return _storage._shadowDx}
        set {_uniqueStorage()._shadowDx = newValue}
      }

      var shadowDy: Int32 {
        get {return _storage._shadowDy}
        set {_uniqueStorage()._shadowDy = newValue}
      }

      var shadowRadius: Int32 {
        get {return _storage._shadowRadius}
        set {_uniqueStorage()._shadowRadius = newValue}
      }

      var shadowColor: String {
        get {return _storage._shadowColor}
        set {_uniqueStorage()._shadowColor = newValue}
      }

      var strokeColor: String {
        get {return _storage._strokeColor}
        set {_uniqueStorage()._strokeColor = newValue}
      }

      var strokeWidth: Int32 {
        get {return _storage._strokeWidth}
        set {_uniqueStorage()._strokeWidth = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}

    fileprivate var _portrait: GiftMessage.TextEffect.Detail? = nil
    fileprivate var _landscape: GiftMessage.TextEffect.Detail? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct LikeMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: Common {
    get {return _common ?? Common()}
    set {_common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return self._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {self._common = nil}

  var count: Int64 = 0

  var total: Int64 = 0

  var color: Int64 = 0

  var user: User {
    get {return _user ?? User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var icon: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _common: Common? = nil
  fileprivate var _user: User? = nil
}

struct ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: Common {
    get {return _storage._common ?? Common()}
    set {_uniqueStorage()._common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return _storage._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {_uniqueStorage()._common = nil}

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  var visibleToSender: Bool {
    get {return _storage._visibleToSender}
    set {_uniqueStorage()._visibleToSender = newValue}
  }

  var backgroundImage: Image {
    get {return _storage._backgroundImage ?? Image()}
    set {_uniqueStorage()._backgroundImage = newValue}
  }
  /// Returns true if `backgroundImage` has been explicitly set.
  var hasBackgroundImage: Bool {return _storage._backgroundImage != nil}
  /// Clears the value of `backgroundImage`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundImage() {_uniqueStorage()._backgroundImage = nil}

  var fullScreenTextColor: String {
    get {return _storage._fullScreenTextColor}
    set {_uniqueStorage()._fullScreenTextColor = newValue}
  }

  var backgroundImageV2: Image {
    get {return _storage._backgroundImageV2 ?? Image()}
    set {_uniqueStorage()._backgroundImageV2 = newValue}
  }
  /// Returns true if `backgroundImageV2` has been explicitly set.
  var hasBackgroundImageV2: Bool {return _storage._backgroundImageV2 != nil}
  /// Clears the value of `backgroundImageV2`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundImageV2() {_uniqueStorage()._backgroundImageV2 = nil}

  var publicAreaCommon: PublicAreaCommon {
    get {return _storage._publicAreaCommon ?? PublicAreaCommon()}
    set {_uniqueStorage()._publicAreaCommon = newValue}
  }
  /// Returns true if `publicAreaCommon` has been explicitly set.
  var hasPublicAreaCommon: Bool {return _storage._publicAreaCommon != nil}
  /// Clears the value of `publicAreaCommon`. Subsequent reads from it will return its default value.
  mutating func clearPublicAreaCommon() {_uniqueStorage()._publicAreaCommon = nil}

  var giftImage: Image {
    get {return _storage._giftImage ?? Image()}
    set {_uniqueStorage()._giftImage = newValue}
  }
  /// Returns true if `giftImage` has been explicitly set.
  var hasGiftImage: Bool {return _storage._giftImage != nil}
  /// Clears the value of `giftImage`. Subsequent reads from it will return its default value.
  mutating func clearGiftImage() {_uniqueStorage()._giftImage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SocialMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: Common {
    get {return _storage._common ?? Common()}
    set {_uniqueStorage()._common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return _storage._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {_uniqueStorage()._common = nil}

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var shareType: Int64 {
    get {return _storage._shareType}
    set {_uniqueStorage()._shareType = newValue}
  }

  var action: Int64 {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var shareTarget: String {
    get {return _storage._shareTarget}
    set {_uniqueStorage()._shareTarget = newValue}
  }

  var followCount: Int64 {
    get {return _storage._followCount}
    set {_uniqueStorage()._followCount = newValue}
  }

  var publicAreaCommon: PublicAreaCommon {
    get {return _storage._publicAreaCommon ?? PublicAreaCommon()}
    set {_uniqueStorage()._publicAreaCommon = newValue}
  }
  /// Returns true if `publicAreaCommon` has been explicitly set.
  var hasPublicAreaCommon: Bool {return _storage._publicAreaCommon != nil}
  /// Clears the value of `publicAreaCommon`. Subsequent reads from it will return its default value.
  mutating func clearPublicAreaCommon() {_uniqueStorage()._publicAreaCommon = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct MemberMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var common: Common {
    get {return _storage._common ?? Common()}
    set {_uniqueStorage()._common = newValue}
  }
  /// Returns true if `common` has been explicitly set.
  var hasCommon: Bool {return _storage._common != nil}
  /// Clears the value of `common`. Subsequent reads from it will return its default value.
  mutating func clearCommon() {_uniqueStorage()._common = nil}

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var memberCount: Int64 {
    get {return _storage._memberCount}
    set {_uniqueStorage()._memberCount = newValue}
  }

  var `operator`: User {
    get {return _storage._operator ?? User()}
    set {_uniqueStorage()._operator = newValue}
  }
  /// Returns true if ``operator`` has been explicitly set.
  var hasOperator: Bool {return _storage._operator != nil}
  /// Clears the value of ``operator``. Subsequent reads from it will return its default value.
  mutating func clearOperator() {_uniqueStorage()._operator = nil}

  var isSetToAdmin: Bool {
    get {return _storage._isSetToAdmin}
    set {_uniqueStorage()._isSetToAdmin = newValue}
  }

  var isTopUser: Bool {
    get {return _storage._isTopUser}
    set {_uniqueStorage()._isTopUser = newValue}
  }

  var rankScore: Int64 {
    get {return _storage._rankScore}
    set {_uniqueStorage()._rankScore = newValue}
  }

  var topUserNo: Int64 {
    get {return _storage._topUserNo}
    set {_uniqueStorage()._topUserNo = newValue}
  }

  var enterType: Int64 {
    get {return _storage._enterType}
    set {_uniqueStorage()._enterType = newValue}
  }

  var action: Int64 {
    get {return _storage._action}
    set {_uniqueStorage()._action = newValue}
  }

  var actionDescription: String {
    get {return _storage._actionDescription}
    set {_uniqueStorage()._actionDescription = newValue}
  }

  var userID: Int64 {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var effectConfig: MemberMessage.EffectConfig {
    get {return _storage._effectConfig ?? MemberMessage.EffectConfig()}
    set {_uniqueStorage()._effectConfig = newValue}
  }
  /// Returns true if `effectConfig` has been explicitly set.
  var hasEffectConfig: Bool {return _storage._effectConfig != nil}
  /// Clears the value of `effectConfig`. Subsequent reads from it will return its default value.
  mutating func clearEffectConfig() {_uniqueStorage()._effectConfig = nil}

  var popStr: String {
    get {return _storage._popStr}
    set {_uniqueStorage()._popStr = newValue}
  }

  var enterEffectConfig: MemberMessage.EffectConfig {
    get {return _storage._enterEffectConfig ?? MemberMessage.EffectConfig()}
    set {_uniqueStorage()._enterEffectConfig = newValue}
  }
  /// Returns true if `enterEffectConfig` has been explicitly set.
  var hasEnterEffectConfig: Bool {return _storage._enterEffectConfig != nil}
  /// Clears the value of `enterEffectConfig`. Subsequent reads from it will return its default value.
  mutating func clearEnterEffectConfig() {_uniqueStorage()._enterEffectConfig = nil}

  var backgroundImage: Image {
    get {return _storage._backgroundImage ?? Image()}
    set {_uniqueStorage()._backgroundImage = newValue}
  }
  /// Returns true if `backgroundImage` has been explicitly set.
  var hasBackgroundImage: Bool {return _storage._backgroundImage != nil}
  /// Clears the value of `backgroundImage`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundImage() {_uniqueStorage()._backgroundImage = nil}

  var backgroundImageV2: Image {
    get {return _storage._backgroundImageV2 ?? Image()}
    set {_uniqueStorage()._backgroundImageV2 = newValue}
  }
  /// Returns true if `backgroundImageV2` has been explicitly set.
  var hasBackgroundImageV2: Bool {return _storage._backgroundImageV2 != nil}
  /// Clears the value of `backgroundImageV2`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundImageV2() {_uniqueStorage()._backgroundImageV2 = nil}

  var anchorDisplayText: Text {
    get {return _storage._anchorDisplayText ?? Text()}
    set {_uniqueStorage()._anchorDisplayText = newValue}
  }
  /// Returns true if `anchorDisplayText` has been explicitly set.
  var hasAnchorDisplayText: Bool {return _storage._anchorDisplayText != nil}
  /// Clears the value of `anchorDisplayText`. Subsequent reads from it will return its default value.
  mutating func clearAnchorDisplayText() {_uniqueStorage()._anchorDisplayText = nil}

  var publicAreaCommon: PublicAreaCommon {
    get {return _storage._publicAreaCommon ?? PublicAreaCommon()}
    set {_uniqueStorage()._publicAreaCommon = newValue}
  }
  /// Returns true if `publicAreaCommon` has been explicitly set.
  var hasPublicAreaCommon: Bool {return _storage._publicAreaCommon != nil}
  /// Clears the value of `publicAreaCommon`. Subsequent reads from it will return its default value.
  mutating func clearPublicAreaCommon() {_uniqueStorage()._publicAreaCommon = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct EffectConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: Int64 {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    var icon: Image {
      get {return _storage._icon ?? Image()}
      set {_uniqueStorage()._icon = newValue}
    }
    /// Returns true if `icon` has been explicitly set.
    var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
    mutating func clearIcon() {_uniqueStorage()._icon = nil}

    var avatarPos: Int64 {
      get {return _storage._avatarPos}
      set {_uniqueStorage()._avatarPos = newValue}
    }

    var text: Text {
      get {return _storage._text ?? Text()}
      set {_uniqueStorage()._text = newValue}
    }
    /// Returns true if `text` has been explicitly set.
    var hasText: Bool {return _storage._text != nil}
    /// Clears the value of `text`. Subsequent reads from it will return its default value.
    mutating func clearText() {_uniqueStorage()._text = nil}

    var textIcon: Image {
      get {return _storage._textIcon ?? Image()}
      set {_uniqueStorage()._textIcon = newValue}
    }
    /// Returns true if `textIcon` has been explicitly set.
    var hasTextIcon: Bool {return _storage._textIcon != nil}
    /// Clears the value of `textIcon`. Subsequent reads from it will return its default value.
    mutating func clearTextIcon() {_uniqueStorage()._textIcon = nil}

    var stayTime: Int32 {
      get {return _storage._stayTime}
      set {_uniqueStorage()._stayTime = newValue}
    }

    var animAssetID: Int64 {
      get {return _storage._animAssetID}
      set {_uniqueStorage()._animAssetID = newValue}
    }

    var badge: Image {
      get {return _storage._badge ?? Image()}
      set {_uniqueStorage()._badge = newValue}
    }
    /// Returns true if `badge` has been explicitly set.
    var hasBadge: Bool {return _storage._badge != nil}
    /// Clears the value of `badge`. Subsequent reads from it will return its default value.
    mutating func clearBadge() {_uniqueStorage()._badge = nil}

    var flexSettingArray: [Int64] {
      get {return _storage._flexSettingArray}
      set {_uniqueStorage()._flexSettingArray = newValue}
    }

    var textIconOverlay: Image {
      get {return _storage._textIconOverlay ?? Image()}
      set {_uniqueStorage()._textIconOverlay = newValue}
    }
    /// Returns true if `textIconOverlay` has been explicitly set.
    var hasTextIconOverlay: Bool {return _storage._textIconOverlay != nil}
    /// Clears the value of `textIconOverlay`. Subsequent reads from it will return its default value.
    mutating func clearTextIconOverlay() {_uniqueStorage()._textIconOverlay = nil}

    var animatedBadge: Image {
      get {return _storage._animatedBadge ?? Image()}
      set {_uniqueStorage()._animatedBadge = newValue}
    }
    /// Returns true if `animatedBadge` has been explicitly set.
    var hasAnimatedBadge: Bool {return _storage._animatedBadge != nil}
    /// Clears the value of `animatedBadge`. Subsequent reads from it will return its default value.
    mutating func clearAnimatedBadge() {_uniqueStorage()._animatedBadge = nil}

    var hasSweepLight_p: Bool {
      get {return _storage._hasSweepLight_p}
      set {_uniqueStorage()._hasSweepLight_p = newValue}
    }

    var textFlexSettingArray: [Int64] {
      get {return _storage._textFlexSettingArray}
      set {_uniqueStorage()._textFlexSettingArray = newValue}
    }

    var centerAnimAssetID: Int64 {
      get {return _storage._centerAnimAssetID}
      set {_uniqueStorage()._centerAnimAssetID = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Common {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var method: String {
    get {return _storage._method}
    set {_uniqueStorage()._method = newValue}
  }

  var msgID: Int64 {
    get {return _storage._msgID}
    set {_uniqueStorage()._msgID = newValue}
  }

  var roomID: Int64 {
    get {return _storage._roomID}
    set {_uniqueStorage()._roomID = newValue}
  }

  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  var monitor: Int32 {
    get {return _storage._monitor}
    set {_uniqueStorage()._monitor = newValue}
  }

  var isShowMsg: Bool {
    get {return _storage._isShowMsg}
    set {_uniqueStorage()._isShowMsg = newValue}
  }

  var describe: String {
    get {return _storage._describe}
    set {_uniqueStorage()._describe = newValue}
  }

  var displayText: Text {
    get {return _storage._displayText ?? Text()}
    set {_uniqueStorage()._displayText = newValue}
  }
  /// Returns true if `displayText` has been explicitly set.
  var hasDisplayText: Bool {return _storage._displayText != nil}
  /// Clears the value of `displayText`. Subsequent reads from it will return its default value.
  mutating func clearDisplayText() {_uniqueStorage()._displayText = nil}

  var foldType: Int64 {
    get {return _storage._foldType}
    set {_uniqueStorage()._foldType = newValue}
  }

  var anchorFoldType: Int64 {
    get {return _storage._anchorFoldType}
    set {_uniqueStorage()._anchorFoldType = newValue}
  }

  var priorityScore: Int64 {
    get {return _storage._priorityScore}
    set {_uniqueStorage()._priorityScore = newValue}
  }

  var logID: String {
    get {return _storage._logID}
    set {_uniqueStorage()._logID = newValue}
  }

  var msgProcessFilterK: String {
    get {return _storage._msgProcessFilterK}
    set {_uniqueStorage()._msgProcessFilterK = newValue}
  }

  var msgProcessFilterV: String {
    get {return _storage._msgProcessFilterV}
    set {_uniqueStorage()._msgProcessFilterV = newValue}
  }

  var user: User {
    get {return _storage._user ?? User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var room: Room {
    get {return _storage._room ?? Room()}
    set {_uniqueStorage()._room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return _storage._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {_uniqueStorage()._room = nil}

  var anchorFoldTypeV2: Int64 {
    get {return _storage._anchorFoldTypeV2}
    set {_uniqueStorage()._anchorFoldTypeV2 = newValue}
  }

  var processAtSeiTimeMs: Int64 {
    get {return _storage._processAtSeiTimeMs}
    set {_uniqueStorage()._processAtSeiTimeMs = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Text {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var defaultPattern: String = String()

  var defaultFormat: TextFormat {
    get {return _defaultFormat ?? TextFormat()}
    set {_defaultFormat = newValue}
  }
  /// Returns true if `defaultFormat` has been explicitly set.
  var hasDefaultFormat: Bool {return self._defaultFormat != nil}
  /// Clears the value of `defaultFormat`. Subsequent reads from it will return its default value.
  mutating func clearDefaultFormat() {self._defaultFormat = nil}

  var pieces: [TextPiece] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _defaultFormat: TextFormat? = nil
}

struct Room {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var idStr: String {
    get {return _storage._idStr}
    set {_uniqueStorage()._idStr = newValue}
  }

  var status: Int64 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var ownerUserID: Int64 {
    get {return _storage._ownerUserID}
    set {_uniqueStorage()._ownerUserID = newValue}
  }

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var userCount: Int64 {
    get {return _storage._userCount}
    set {_uniqueStorage()._userCount = newValue}
  }

  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  var linkmicLayout: Int64 {
    get {return _storage._linkmicLayout}
    set {_uniqueStorage()._linkmicLayout = newValue}
  }

  var finishTime: Int64 {
    get {return _storage._finishTime}
    set {_uniqueStorage()._finishTime = newValue}
  }

  var extra: RoomExtra {
    get {return _storage._extra ?? RoomExtra()}
    set {_uniqueStorage()._extra = newValue}
  }
  /// Returns true if `extra` has been explicitly set.
  var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
  mutating func clearExtra() {_uniqueStorage()._extra = nil}

  var dynamicCoverUri: String {
    get {return _storage._dynamicCoverUri}
    set {_uniqueStorage()._dynamicCoverUri = newValue}
  }

  var dynamicCoverDict: Dictionary<Int64,String> {
    get {return _storage._dynamicCoverDict}
    set {_uniqueStorage()._dynamicCoverDict = newValue}
  }

  var lastPingTime: Int64 {
    get {return _storage._lastPingTime}
    set {_uniqueStorage()._lastPingTime = newValue}
  }

  var liveID: Int64 {
    get {return _storage._liveID}
    set {_uniqueStorage()._liveID = newValue}
  }

  var streamProvider: Int64 {
    get {return _storage._streamProvider}
    set {_uniqueStorage()._streamProvider = newValue}
  }

  var osType: Int64 {
    get {return _storage._osType}
    set {_uniqueStorage()._osType = newValue}
  }

  var clientVersion: Int64 {
    get {return _storage._clientVersion}
    set {_uniqueStorage()._clientVersion = newValue}
  }

  var withLinkmic: Bool {
    get {return _storage._withLinkmic}
    set {_uniqueStorage()._withLinkmic = newValue}
  }

  var enableRoomPerspective: Bool {
    get {return _storage._enableRoomPerspective}
    set {_uniqueStorage()._enableRoomPerspective = newValue}
  }

  var cover: Image {
    get {return _storage._cover ?? Image()}
    set {_uniqueStorage()._cover = newValue}
  }
  /// Returns true if `cover` has been explicitly set.
  var hasCover: Bool {return _storage._cover != nil}
  /// Clears the value of `cover`. Subsequent reads from it will return its default value.
  mutating func clearCover() {_uniqueStorage()._cover = nil}

  var dynamicCover: Image {
    get {return _storage._dynamicCover ?? Image()}
    set {_uniqueStorage()._dynamicCover = newValue}
  }
  /// Returns true if `dynamicCover` has been explicitly set.
  var hasDynamicCover: Bool {return _storage._dynamicCover != nil}
  /// Clears the value of `dynamicCover`. Subsequent reads from it will return its default value.
  mutating func clearDynamicCover() {_uniqueStorage()._dynamicCover = nil}

  var dynamicCoverLow: Image {
    get {return _storage._dynamicCoverLow ?? Image()}
    set {_uniqueStorage()._dynamicCoverLow = newValue}
  }
  /// Returns true if `dynamicCoverLow` has been explicitly set.
  var hasDynamicCoverLow: Bool {return _storage._dynamicCoverLow != nil}
  /// Clears the value of `dynamicCoverLow`. Subsequent reads from it will return its default value.
  mutating func clearDynamicCoverLow() {_uniqueStorage()._dynamicCoverLow = nil}

  var shareURL: String {
    get {return _storage._shareURL}
    set {_uniqueStorage()._shareURL = newValue}
  }

  var anchorShareText: String {
    get {return _storage._anchorShareText}
    set {_uniqueStorage()._anchorShareText = newValue}
  }

  var userShareText: String {
    get {return _storage._userShareText}
    set {_uniqueStorage()._userShareText = newValue}
  }

  var streamID: Int64 {
    get {return _storage._streamID}
    set {_uniqueStorage()._streamID = newValue}
  }

  var streamIDStr: String {
    get {return _storage._streamIDStr}
    set {_uniqueStorage()._streamIDStr = newValue}
  }

  var streamURL: StreamUrl {
    get {return _storage._streamURL ?? StreamUrl()}
    set {_uniqueStorage()._streamURL = newValue}
  }
  /// Returns true if `streamURL` has been explicitly set.
  var hasStreamURL: Bool {return _storage._streamURL != nil}
  /// Clears the value of `streamURL`. Subsequent reads from it will return its default value.
  mutating func clearStreamURL() {_uniqueStorage()._streamURL = nil}

  var mosaicStatus: Int64 {
    get {return _storage._mosaicStatus}
    set {_uniqueStorage()._mosaicStatus = newValue}
  }

  var mosaicTip: String {
    get {return _storage._mosaicTip}
    set {_uniqueStorage()._mosaicTip = newValue}
  }

  var cellStyle: Int64 {
    get {return _storage._cellStyle}
    set {_uniqueStorage()._cellStyle = newValue}
  }

  var linkMic: LinkMic {
    get {return _storage._linkMic ?? LinkMic()}
    set {_uniqueStorage()._linkMic = newValue}
  }
  /// Returns true if `linkMic` has been explicitly set.
  var hasLinkMic: Bool {return _storage._linkMic != nil}
  /// Clears the value of `linkMic`. Subsequent reads from it will return its default value.
  mutating func clearLinkMic() {_uniqueStorage()._linkMic = nil}

  var luckymoneyNum: Int64 {
    get {return _storage._luckymoneyNum}
    set {_uniqueStorage()._luckymoneyNum = newValue}
  }

  var decoList: [Decoration] {
    get {return _storage._decoList}
    set {_uniqueStorage()._decoList = newValue}
  }

  var topFans: [TopFan] {
    get {return _storage._topFans}
    set {_uniqueStorage()._topFans = newValue}
  }

  var stats: RoomStats {
    get {return _storage._stats ?? RoomStats()}
    set {_uniqueStorage()._stats = newValue}
  }
  /// Returns true if `stats` has been explicitly set.
  var hasStats: Bool {return _storage._stats != nil}
  /// Clears the value of `stats`. Subsequent reads from it will return its default value.
  mutating func clearStats() {_uniqueStorage()._stats = nil}

  var sunDailyIconContent: String {
    get {return _storage._sunDailyIconContent}
    set {_uniqueStorage()._sunDailyIconContent = newValue}
  }

  var distance: String {
    get {return _storage._distance}
    set {_uniqueStorage()._distance = newValue}
  }

  var distanceCity: String {
    get {return _storage._distanceCity}
    set {_uniqueStorage()._distanceCity = newValue}
  }

  var location: String {
    get {return _storage._location}
    set {_uniqueStorage()._location = newValue}
  }

  var realDistance: String {
    get {return _storage._realDistance}
    set {_uniqueStorage()._realDistance = newValue}
  }

  var feedRoomLabel: Image {
    get {return _storage._feedRoomLabel ?? Image()}
    set {_uniqueStorage()._feedRoomLabel = newValue}
  }
  /// Returns true if `feedRoomLabel` has been explicitly set.
  var hasFeedRoomLabel: Bool {return _storage._feedRoomLabel != nil}
  /// Clears the value of `feedRoomLabel`. Subsequent reads from it will return its default value.
  mutating func clearFeedRoomLabel() {_uniqueStorage()._feedRoomLabel = nil}

  var commonLabelList: String {
    get {return _storage._commonLabelList}
    set {_uniqueStorage()._commonLabelList = newValue}
  }

  var livingRoomAttrs: RoomUserAttr {
    get {return _storage._livingRoomAttrs ?? RoomUserAttr()}
    set {_uniqueStorage()._livingRoomAttrs = newValue}
  }
  /// Returns true if `livingRoomAttrs` has been explicitly set.
  var hasLivingRoomAttrs: Bool {return _storage._livingRoomAttrs != nil}
  /// Clears the value of `livingRoomAttrs`. Subsequent reads from it will return its default value.
  mutating func clearLivingRoomAttrs() {_uniqueStorage()._livingRoomAttrs = nil}

  var adminUserIds: [Int64] {
    get {return _storage._adminUserIds}
    set {_uniqueStorage()._adminUserIds = newValue}
  }

  var owner: User {
    get {return _storage._owner ?? User()}
    set {_uniqueStorage()._owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  var hasOwner: Bool {return _storage._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  mutating func clearOwner() {_uniqueStorage()._owner = nil}

  var privateInfo: String {
    get {return _storage._privateInfo}
    set {_uniqueStorage()._privateInfo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct RoomExtra {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RoomStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RoomUserAttr {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StreamUrl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct LinkMic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Decoration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TopFan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var shortID: Int64 {
    get {return _storage._shortID}
    set {_uniqueStorage()._shortID = newValue}
  }

  var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  var gender: Int32 {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  var signature: String {
    get {return _storage._signature}
    set {_uniqueStorage()._signature = newValue}
  }

  var level: Int32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  var birthday: Int64 {
    get {return _storage._birthday}
    set {_uniqueStorage()._birthday = newValue}
  }

  var telephone: String {
    get {return _storage._telephone}
    set {_uniqueStorage()._telephone = newValue}
  }

  var avatarThumb: Image {
    get {return _storage._avatarThumb ?? Image()}
    set {_uniqueStorage()._avatarThumb = newValue}
  }
  /// Returns true if `avatarThumb` has been explicitly set.
  var hasAvatarThumb: Bool {return _storage._avatarThumb != nil}
  /// Clears the value of `avatarThumb`. Subsequent reads from it will return its default value.
  mutating func clearAvatarThumb() {_uniqueStorage()._avatarThumb = nil}

  var avatarMedium: Image {
    get {return _storage._avatarMedium ?? Image()}
    set {_uniqueStorage()._avatarMedium = newValue}
  }
  /// Returns true if `avatarMedium` has been explicitly set.
  var hasAvatarMedium: Bool {return _storage._avatarMedium != nil}
  /// Clears the value of `avatarMedium`. Subsequent reads from it will return its default value.
  mutating func clearAvatarMedium() {_uniqueStorage()._avatarMedium = nil}

  var avatarLarge: Image {
    get {return _storage._avatarLarge ?? Image()}
    set {_uniqueStorage()._avatarLarge = newValue}
  }
  /// Returns true if `avatarLarge` has been explicitly set.
  var hasAvatarLarge: Bool {return _storage._avatarLarge != nil}
  /// Clears the value of `avatarLarge`. Subsequent reads from it will return its default value.
  mutating func clearAvatarLarge() {_uniqueStorage()._avatarLarge = nil}

  var verified: Bool {
    get {return _storage._verified}
    set {_uniqueStorage()._verified = newValue}
  }

  var experience: Int32 {
    get {return _storage._experience}
    set {_uniqueStorage()._experience = newValue}
  }

  var city: String {
    get {return _storage._city}
    set {_uniqueStorage()._city = newValue}
  }

  var status: Int32 {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var createTime: Int64 {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  var modifyTime: Int64 {
    get {return _storage._modifyTime}
    set {_uniqueStorage()._modifyTime = newValue}
  }

  var secret: Int32 {
    get {return _storage._secret}
    set {_uniqueStorage()._secret = newValue}
  }

  var shareQrcodeUri: String {
    get {return _storage._shareQrcodeUri}
    set {_uniqueStorage()._shareQrcodeUri = newValue}
  }

  var incomeSharePercent: Int32 {
    get {return _storage._incomeSharePercent}
    set {_uniqueStorage()._incomeSharePercent = newValue}
  }

  var badgeImageList: Image {
    get {return _storage._badgeImageList ?? Image()}
    set {_uniqueStorage()._badgeImageList = newValue}
  }
  /// Returns true if `badgeImageList` has been explicitly set.
  var hasBadgeImageList: Bool {return _storage._badgeImageList != nil}
  /// Clears the value of `badgeImageList`. Subsequent reads from it will return its default value.
  mutating func clearBadgeImageList() {_uniqueStorage()._badgeImageList = nil}

  var followInfo: User.FollowInfo {
    get {return _storage._followInfo ?? User.FollowInfo()}
    set {_uniqueStorage()._followInfo = newValue}
  }
  /// Returns true if `followInfo` has been explicitly set.
  var hasFollowInfo: Bool {return _storage._followInfo != nil}
  /// Clears the value of `followInfo`. Subsequent reads from it will return its default value.
  mutating func clearFollowInfo() {_uniqueStorage()._followInfo = nil}

  var payGrade: User.PayGrade {
    get {return _storage._payGrade ?? User.PayGrade()}
    set {_uniqueStorage()._payGrade = newValue}
  }
  /// Returns true if `payGrade` has been explicitly set.
  var hasPayGrade: Bool {return _storage._payGrade != nil}
  /// Clears the value of `payGrade`. Subsequent reads from it will return its default value.
  mutating func clearPayGrade() {_uniqueStorage()._payGrade = nil}

  var fansClub: User.FansClub {
    get {return _storage._fansClub ?? User.FansClub()}
    set {_uniqueStorage()._fansClub = newValue}
  }
  /// Returns true if `fansClub` has been explicitly set.
  var hasFansClub: Bool {return _storage._fansClub != nil}
  /// Clears the value of `fansClub`. Subsequent reads from it will return its default value.
  mutating func clearFansClub() {_uniqueStorage()._fansClub = nil}

  var border: User.Border {
    get {return _storage._border ?? User.Border()}
    set {_uniqueStorage()._border = newValue}
  }
  /// Returns true if `border` has been explicitly set.
  var hasBorder: Bool {return _storage._border != nil}
  /// Clears the value of `border`. Subsequent reads from it will return its default value.
  mutating func clearBorder() {_uniqueStorage()._border = nil}

  var specialID: String {
    get {return _storage._specialID}
    set {_uniqueStorage()._specialID = newValue}
  }

  var avatarBorder: Image {
    get {return _storage._avatarBorder ?? Image()}
    set {_uniqueStorage()._avatarBorder = newValue}
  }
  /// Returns true if `avatarBorder` has been explicitly set.
  var hasAvatarBorder: Bool {return _storage._avatarBorder != nil}
  /// Clears the value of `avatarBorder`. Subsequent reads from it will return its default value.
  mutating func clearAvatarBorder() {_uniqueStorage()._avatarBorder = nil}

  var medal: Image {
    get {return _storage._medal ?? Image()}
    set {_uniqueStorage()._medal = newValue}
  }
  /// Returns true if `medal` has been explicitly set.
  var hasMedal: Bool {return _storage._medal != nil}
  /// Clears the value of `medal`. Subsequent reads from it will return its default value.
  mutating func clearMedal() {_uniqueStorage()._medal = nil}

  var realTimeIcons: [Image] {
    get {return _storage._realTimeIcons}
    set {_uniqueStorage()._realTimeIcons = newValue}
  }

  var newRealTimeIcons: [Image] {
    get {return _storage._newRealTimeIcons}
    set {_uniqueStorage()._newRealTimeIcons = newValue}
  }

  var topVipNo: Int64 {
    get {return _storage._topVipNo}
    set {_uniqueStorage()._topVipNo = newValue}
  }

  var userAttr: User.UserAttr {
    get {return _storage._userAttr ?? User.UserAttr()}
    set {_uniqueStorage()._userAttr = newValue}
  }
  /// Returns true if `userAttr` has been explicitly set.
  var hasUserAttr: Bool {return _storage._userAttr != nil}
  /// Clears the value of `userAttr`. Subsequent reads from it will return its default value.
  mutating func clearUserAttr() {_uniqueStorage()._userAttr = nil}

  var ownRoom: User.OwnRoom {
    get {return _storage._ownRoom ?? User.OwnRoom()}
    set {_uniqueStorage()._ownRoom = newValue}
  }
  /// Returns true if `ownRoom` has been explicitly set.
  var hasOwnRoom: Bool {return _storage._ownRoom != nil}
  /// Clears the value of `ownRoom`. Subsequent reads from it will return its default value.
  mutating func clearOwnRoom() {_uniqueStorage()._ownRoom = nil}

  var payScore: Int64 {
    get {return _storage._payScore}
    set {_uniqueStorage()._payScore = newValue}
  }

  var ticketCount: Int64 {
    get {return _storage._ticketCount}
    set {_uniqueStorage()._ticketCount = newValue}
  }

  var anchorInfo: User.AnchorInfo {
    get {return _storage._anchorInfo ?? User.AnchorInfo()}
    set {_uniqueStorage()._anchorInfo = newValue}
  }
  /// Returns true if `anchorInfo` has been explicitly set.
  var hasAnchorInfo: Bool {return _storage._anchorInfo != nil}
  /// Clears the value of `anchorInfo`. Subsequent reads from it will return its default value.
  mutating func clearAnchorInfo() {_uniqueStorage()._anchorInfo = nil}

  var linkMicStats: Int32 {
    get {return _storage._linkMicStats}
    set {_uniqueStorage()._linkMicStats = newValue}
  }

  var displayID: String {
    get {return _storage._displayID}
    set {_uniqueStorage()._displayID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct UserAttr {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct OwnRoom {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AnchorInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct FollowInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var followingCount: Int64 = 0

    var followerCount: Int64 = 0

    var followStatus: Int64 = 0

    var pushStatus: Int64 = 0

    var remarkName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct FansClub {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: User.FansClub.FansClubData {
      get {return _data ?? User.FansClub.FansClubData()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    mutating func clearData() {self._data = nil}

    var preferData: Dictionary<Int32,User.FansClub.FansClubData> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct FansClubData {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var clubName: String = String()

      var level: Int32 = 0

      var userFansClubStatus: Int32 = 0

      var badge: User.FansClub.FansClubData.UserBadge {
        get {return _badge ?? User.FansClub.FansClubData.UserBadge()}
        set {_badge = newValue}
      }
      /// Returns true if `badge` has been explicitly set.
      var hasBadge: Bool {return self._badge != nil}
      /// Clears the value of `badge`. Subsequent reads from it will return its default value.
      mutating func clearBadge() {self._badge = nil}

      var availableGiftIds: [Int64] = []

      var anchorID: Int64 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct UserBadge {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var icons: Dictionary<Int32,Image> = [:]

        var title: String = String()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      init() {}

      fileprivate var _badge: User.FansClub.FansClubData.UserBadge? = nil
    }

    init() {}

    fileprivate var _data: User.FansClub.FansClubData? = nil
  }

  struct Border {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GradeBuffInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var buffLevel: Int64 = 0

    var status: Int32 = 0

    var endTime: Int64 = 0

    var statsInfo: Dictionary<Int64,Int64> = [:]

    var buffBadge: Image {
      get {return _buffBadge ?? Image()}
      set {_buffBadge = newValue}
    }
    /// Returns true if `buffBadge` has been explicitly set.
    var hasBuffBadge: Bool {return self._buffBadge != nil}
    /// Clears the value of `buffBadge`. Subsequent reads from it will return its default value.
    mutating func clearBuffBadge() {self._buffBadge = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _buffBadge: Image? = nil
  }

  struct PayGrade {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var totalDiamondCount: Int64 {
      get {return _storage._totalDiamondCount}
      set {_uniqueStorage()._totalDiamondCount = newValue}
    }

    var diamondIcon: Image {
      get {return _storage._diamondIcon ?? Image()}
      set {_uniqueStorage()._diamondIcon = newValue}
    }
    /// Returns true if `diamondIcon` has been explicitly set.
    var hasDiamondIcon: Bool {return _storage._diamondIcon != nil}
    /// Clears the value of `diamondIcon`. Subsequent reads from it will return its default value.
    mutating func clearDiamondIcon() {_uniqueStorage()._diamondIcon = nil}

    var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    var icon: Image {
      get {return _storage._icon ?? Image()}
      set {_uniqueStorage()._icon = newValue}
    }
    /// Returns true if `icon` has been explicitly set.
    var hasIcon: Bool {return _storage._icon != nil}
    /// Clears the value of `icon`. Subsequent reads from it will return its default value.
    mutating func clearIcon() {_uniqueStorage()._icon = nil}

    var nextName: String {
      get {return _storage._nextName}
      set {_uniqueStorage()._nextName = newValue}
    }

    var level: Int64 {
      get {return _storage._level}
      set {_uniqueStorage()._level = newValue}
    }

    var nextIcon: Image {
      get {return _storage._nextIcon ?? Image()}
      set {_uniqueStorage()._nextIcon = newValue}
    }
    /// Returns true if `nextIcon` has been explicitly set.
    var hasNextIcon: Bool {return _storage._nextIcon != nil}
    /// Clears the value of `nextIcon`. Subsequent reads from it will return its default value.
    mutating func clearNextIcon() {_uniqueStorage()._nextIcon = nil}

    var nextDiamond: Int64 {
      get {return _storage._nextDiamond}
      set {_uniqueStorage()._nextDiamond = newValue}
    }

    var nowDiamond: Int64 {
      get {return _storage._nowDiamond}
      set {_uniqueStorage()._nowDiamond = newValue}
    }

    var thisGradeMinDiamond: Int64 {
      get {return _storage._thisGradeMinDiamond}
      set {_uniqueStorage()._thisGradeMinDiamond = newValue}
    }

    var thisGradeMaxDiamond: Int64 {
      get {return _storage._thisGradeMaxDiamond}
      set {_uniqueStorage()._thisGradeMaxDiamond = newValue}
    }

    var payDiamondBak: Int64 {
      get {return _storage._payDiamondBak}
      set {_uniqueStorage()._payDiamondBak = newValue}
    }

    var gradeDescribe: String {
      get {return _storage._gradeDescribe}
      set {_uniqueStorage()._gradeDescribe = newValue}
    }

    var gradeIconList: [User.PayGrade.GradeIcon] {
      get {return _storage._gradeIconList}
      set {_uniqueStorage()._gradeIconList = newValue}
    }

    var screenChatType: Int64 {
      get {return _storage._screenChatType}
      set {_uniqueStorage()._screenChatType = newValue}
    }

    var imIcon: Image {
      get {return _storage._imIcon ?? Image()}
      set {_uniqueStorage()._imIcon = newValue}
    }
    /// Returns true if `imIcon` has been explicitly set.
    var hasImIcon: Bool {return _storage._imIcon != nil}
    /// Clears the value of `imIcon`. Subsequent reads from it will return its default value.
    mutating func clearImIcon() {_uniqueStorage()._imIcon = nil}

    var imIconWithLevel: Image {
      get {return _storage._imIconWithLevel ?? Image()}
      set {_uniqueStorage()._imIconWithLevel = newValue}
    }
    /// Returns true if `imIconWithLevel` has been explicitly set.
    var hasImIconWithLevel: Bool {return _storage._imIconWithLevel != nil}
    /// Clears the value of `imIconWithLevel`. Subsequent reads from it will return its default value.
    mutating func clearImIconWithLevel() {_uniqueStorage()._imIconWithLevel = nil}

    var liveIcon: Image {
      get {return _storage._liveIcon ?? Image()}
      set {_uniqueStorage()._liveIcon = newValue}
    }
    /// Returns true if `liveIcon` has been explicitly set.
    var hasLiveIcon: Bool {return _storage._liveIcon != nil}
    /// Clears the value of `liveIcon`. Subsequent reads from it will return its default value.
    mutating func clearLiveIcon() {_uniqueStorage()._liveIcon = nil}

    var newImIconWithLevel: Image {
      get {return _storage._newImIconWithLevel ?? Image()}
      set {_uniqueStorage()._newImIconWithLevel = newValue}
    }
    /// Returns true if `newImIconWithLevel` has been explicitly set.
    var hasNewImIconWithLevel: Bool {return _storage._newImIconWithLevel != nil}
    /// Clears the value of `newImIconWithLevel`. Subsequent reads from it will return its default value.
    mutating func clearNewImIconWithLevel() {_uniqueStorage()._newImIconWithLevel = nil}

    var newLiveIcon: Image {
      get {return _storage._newLiveIcon ?? Image()}
      set {_uniqueStorage()._newLiveIcon = newValue}
    }
    /// Returns true if `newLiveIcon` has been explicitly set.
    var hasNewLiveIcon: Bool {return _storage._newLiveIcon != nil}
    /// Clears the value of `newLiveIcon`. Subsequent reads from it will return its default value.
    mutating func clearNewLiveIcon() {_uniqueStorage()._newLiveIcon = nil}

    var upgradeNeedConsume: Int64 {
      get {return _storage._upgradeNeedConsume}
      set {_uniqueStorage()._upgradeNeedConsume = newValue}
    }

    var nextPrivileges: String {
      get {return _storage._nextPrivileges}
      set {_uniqueStorage()._nextPrivileges = newValue}
    }

    var background: Image {
      get {return _storage._background ?? Image()}
      set {_uniqueStorage()._background = newValue}
    }
    /// Returns true if `background` has been explicitly set.
    var hasBackground: Bool {return _storage._background != nil}
    /// Clears the value of `background`. Subsequent reads from it will return its default value.
    mutating func clearBackground() {_uniqueStorage()._background = nil}

    var backgroundBack: Image {
      get {return _storage._backgroundBack ?? Image()}
      set {_uniqueStorage()._backgroundBack = newValue}
    }
    /// Returns true if `backgroundBack` has been explicitly set.
    var hasBackgroundBack: Bool {return _storage._backgroundBack != nil}
    /// Clears the value of `backgroundBack`. Subsequent reads from it will return its default value.
    mutating func clearBackgroundBack() {_uniqueStorage()._backgroundBack = nil}

    var score: Int64 {
      get {return _storage._score}
      set {_uniqueStorage()._score = newValue}
    }

    var buffInfo: User.GradeBuffInfo {
      get {return _storage._buffInfo ?? User.GradeBuffInfo()}
      set {_uniqueStorage()._buffInfo = newValue}
    }
    /// Returns true if `buffInfo` has been explicitly set.
    var hasBuffInfo: Bool {return _storage._buffInfo != nil}
    /// Clears the value of `buffInfo`. Subsequent reads from it will return its default value.
    mutating func clearBuffInfo() {_uniqueStorage()._buffInfo = nil}

    var gradeBanner: String {
      get {return _storage._gradeBanner}
      set {_uniqueStorage()._gradeBanner = newValue}
    }

    var profileDialogBg: Image {
      get {return _storage._profileDialogBg ?? Image()}
      set {_uniqueStorage()._profileDialogBg = newValue}
    }
    /// Returns true if `profileDialogBg` has been explicitly set.
    var hasProfileDialogBg: Bool {return _storage._profileDialogBg != nil}
    /// Clears the value of `profileDialogBg`. Subsequent reads from it will return its default value.
    mutating func clearProfileDialogBg() {_uniqueStorage()._profileDialogBg = nil}

    var profileDialogBgBack: Image {
      get {return _storage._profileDialogBgBack ?? Image()}
      set {_uniqueStorage()._profileDialogBgBack = newValue}
    }
    /// Returns true if `profileDialogBgBack` has been explicitly set.
    var hasProfileDialogBgBack: Bool {return _storage._profileDialogBgBack != nil}
    /// Clears the value of `profileDialogBgBack`. Subsequent reads from it will return its default value.
    mutating func clearProfileDialogBgBack() {_uniqueStorage()._profileDialogBgBack = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct GradeIcon {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var icon: Image {
        get {return _icon ?? Image()}
        set {_icon = newValue}
      }
      /// Returns true if `icon` has been explicitly set.
      var hasIcon: Bool {return self._icon != nil}
      /// Clears the value of `icon`. Subsequent reads from it will return its default value.
      mutating func clearIcon() {self._icon = nil}

      var iconDiamond: Int64 = 0

      var level: Int64 = 0

      var levelStr: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _icon: Image? = nil
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TextFormat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: String = String()

  var bold: Bool = false

  var italic: Bool = false

  var weight: Int32 = 0

  var italicAngle: Int32 = 0

  var fontSize: Int32 = 0

  var userHeightLightColor: Bool = false

  var useRemoteClor: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TextPiece {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Int32 = 0

  var format: TextFormat {
    get {return _format ?? TextFormat()}
    set {_format = newValue}
  }
  /// Returns true if `format` has been explicitly set.
  var hasFormat: Bool {return self._format != nil}
  /// Clears the value of `format`. Subsequent reads from it will return its default value.
  mutating func clearFormat() {self._format = nil}

  var stringValue: String = String()

  var userValue: TextPieceUser {
    get {return _userValue ?? TextPieceUser()}
    set {_userValue = newValue}
  }
  /// Returns true if `userValue` has been explicitly set.
  var hasUserValue: Bool {return self._userValue != nil}
  /// Clears the value of `userValue`. Subsequent reads from it will return its default value.
  mutating func clearUserValue() {self._userValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _format: TextFormat? = nil
  fileprivate var _userValue: TextPieceUser? = nil
}

struct Image {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var urlList: [String] = []

  var uri: String = String()

  var height: Int64 = 0

  var width: Int64 = 0

  var avgColor: String = String()

  var imageType: Int32 = 0

  var openWebURL: String = String()

  var content: Image.Content {
    get {return _content ?? Image.Content()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var isAnimated: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Content {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var fontColor: String = String()

    var level: Int64 = 0

    var alternativeText: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _content: Image.Content? = nil
}

struct TextPieceUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: User {
    get {return _user ?? User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var withColon: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: User? = nil
}

struct PublicAreaCommon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userLabel: Image {
    get {return _userLabel ?? Image()}
    set {_userLabel = newValue}
  }
  /// Returns true if `userLabel` has been explicitly set.
  var hasUserLabel: Bool {return self._userLabel != nil}
  /// Clears the value of `userLabel`. Subsequent reads from it will return its default value.
  mutating func clearUserLabel() {self._userLabel = nil}

  var userConsumeInRoom: Int64 = 0

  var userSendGiftCntInRoom: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userLabel: Image? = nil
}

struct GiftIMPriority {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var queueSizes: [Int64] = []

  var selfQueuePriority: Int64 = 0

  var priority: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftTrayInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trayDisplayText: Text {
    get {return _storage._trayDisplayText ?? Text()}
    set {_uniqueStorage()._trayDisplayText = newValue}
  }
  /// Returns true if `trayDisplayText` has been explicitly set.
  var hasTrayDisplayText: Bool {return _storage._trayDisplayText != nil}
  /// Clears the value of `trayDisplayText`. Subsequent reads from it will return its default value.
  mutating func clearTrayDisplayText() {_uniqueStorage()._trayDisplayText = nil}

  var trayBaseImg: Image {
    get {return _storage._trayBaseImg ?? Image()}
    set {_uniqueStorage()._trayBaseImg = newValue}
  }
  /// Returns true if `trayBaseImg` has been explicitly set.
  var hasTrayBaseImg: Bool {return _storage._trayBaseImg != nil}
  /// Clears the value of `trayBaseImg`. Subsequent reads from it will return its default value.
  mutating func clearTrayBaseImg() {_uniqueStorage()._trayBaseImg = nil}

  var trayHeadImg: Image {
    get {return _storage._trayHeadImg ?? Image()}
    set {_uniqueStorage()._trayHeadImg = newValue}
  }
  /// Returns true if `trayHeadImg` has been explicitly set.
  var hasTrayHeadImg: Bool {return _storage._trayHeadImg != nil}
  /// Clears the value of `trayHeadImg`. Subsequent reads from it will return its default value.
  mutating func clearTrayHeadImg() {_uniqueStorage()._trayHeadImg = nil}

  var trayRightImg: Image {
    get {return _storage._trayRightImg ?? Image()}
    set {_uniqueStorage()._trayRightImg = newValue}
  }
  /// Returns true if `trayRightImg` has been explicitly set.
  var hasTrayRightImg: Bool {return _storage._trayRightImg != nil}
  /// Clears the value of `trayRightImg`. Subsequent reads from it will return its default value.
  mutating func clearTrayRightImg() {_uniqueStorage()._trayRightImg = nil}

  var trayLevel: Int64 {
    get {return _storage._trayLevel}
    set {_uniqueStorage()._trayLevel = newValue}
  }

  var trayDynamicImg: Image {
    get {return _storage._trayDynamicImg ?? Image()}
    set {_uniqueStorage()._trayDynamicImg = newValue}
  }
  /// Returns true if `trayDynamicImg` has been explicitly set.
  var hasTrayDynamicImg: Bool {return _storage._trayDynamicImg != nil}
  /// Clears the value of `trayDynamicImg`. Subsequent reads from it will return its default value.
  mutating func clearTrayDynamicImg() {_uniqueStorage()._trayDynamicImg = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GiftStruct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var image: Image {
    get {return _storage._image ?? Image()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var describe: String {
    get {return _storage._describe}
    set {_uniqueStorage()._describe = newValue}
  }

  var notify: Bool {
    get {return _storage._notify}
    set {_uniqueStorage()._notify = newValue}
  }

  var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var fansclubInfo: GiftStruct.GiftStructFansClubInfo {
    get {return _storage._fansclubInfo ?? GiftStruct.GiftStructFansClubInfo()}
    set {_uniqueStorage()._fansclubInfo = newValue}
  }
  /// Returns true if `fansclubInfo` has been explicitly set.
  var hasFansclubInfo: Bool {return _storage._fansclubInfo != nil}
  /// Clears the value of `fansclubInfo`. Subsequent reads from it will return its default value.
  mutating func clearFansclubInfo() {_uniqueStorage()._fansclubInfo = nil}

  var forLinkmic: Bool {
    get {return _storage._forLinkmic}
    set {_uniqueStorage()._forLinkmic = newValue}
  }

  var doodle: Bool {
    get {return _storage._doodle}
    set {_uniqueStorage()._doodle = newValue}
  }

  var forFansclub: Bool {
    get {return _storage._forFansclub}
    set {_uniqueStorage()._forFansclub = newValue}
  }

  var combo: Bool {
    get {return _storage._combo}
    set {_uniqueStorage()._combo = newValue}
  }

  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var diamondCount: Int32 {
    get {return _storage._diamondCount}
    set {_uniqueStorage()._diamondCount = newValue}
  }

  var isDisplayedOnPanel: Int32 {
    get {return _storage._isDisplayedOnPanel}
    set {_uniqueStorage()._isDisplayedOnPanel = newValue}
  }

  var primaryEffectID: Int64 {
    get {return _storage._primaryEffectID}
    set {_uniqueStorage()._primaryEffectID = newValue}
  }

  var giftLabelIcon: Image {
    get {return _storage._giftLabelIcon ?? Image()}
    set {_uniqueStorage()._giftLabelIcon = newValue}
  }
  /// Returns true if `giftLabelIcon` has been explicitly set.
  var hasGiftLabelIcon: Bool {return _storage._giftLabelIcon != nil}
  /// Clears the value of `giftLabelIcon`. Subsequent reads from it will return its default value.
  mutating func clearGiftLabelIcon() {_uniqueStorage()._giftLabelIcon = nil}

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var region: String {
    get {return _storage._region}
    set {_uniqueStorage()._region = newValue}
  }

  var manual: String {
    get {return _storage._manual}
    set {_uniqueStorage()._manual = newValue}
  }

  var forCustom: Bool {
    get {return _storage._forCustom}
    set {_uniqueStorage()._forCustom = newValue}
  }

  var specialEffects: Dictionary<String,Int64> {
    get {return _storage._specialEffects}
    set {_uniqueStorage()._specialEffects = newValue}
  }

  var icon: Image {
    get {return _storage._icon ?? Image()}
    set {_uniqueStorage()._icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {_uniqueStorage()._icon = nil}

  var actionType: Int32 {
    get {return _storage._actionType}
    set {_uniqueStorage()._actionType = newValue}
  }

  var watermelonSeeds: Int32 {
    get {return _storage._watermelonSeeds}
    set {_uniqueStorage()._watermelonSeeds = newValue}
  }

  var goldEffect: String {
    get {return _storage._goldEffect}
    set {_uniqueStorage()._goldEffect = newValue}
  }

  var subs: [LuckyMoneyGiftMeta] {
    get {return _storage._subs}
    set {_uniqueStorage()._subs = newValue}
  }

  var goldenBeans: Int64 {
    get {return _storage._goldenBeans}
    set {_uniqueStorage()._goldenBeans = newValue}
  }

  var honorLevel: Int64 {
    get {return _storage._honorLevel}
    set {_uniqueStorage()._honorLevel = newValue}
  }

  var itemType: Int32 {
    get {return _storage._itemType}
    set {_uniqueStorage()._itemType = newValue}
  }

  var schemeURL: String {
    get {return _storage._schemeURL}
    set {_uniqueStorage()._schemeURL = newValue}
  }

  var giftOperation: GiftPanelOperation {
    get {return _storage._giftOperation ?? GiftPanelOperation()}
    set {_uniqueStorage()._giftOperation = newValue}
  }
  /// Returns true if `giftOperation` has been explicitly set.
  var hasGiftOperation: Bool {return _storage._giftOperation != nil}
  /// Clears the value of `giftOperation`. Subsequent reads from it will return its default value.
  mutating func clearGiftOperation() {_uniqueStorage()._giftOperation = nil}

  var eventName: String {
    get {return _storage._eventName}
    set {_uniqueStorage()._eventName = newValue}
  }

  var nobleLevel: Int64 {
    get {return _storage._nobleLevel}
    set {_uniqueStorage()._nobleLevel = newValue}
  }

  var guideURL: String {
    get {return _storage._guideURL}
    set {_uniqueStorage()._guideURL = newValue}
  }

  var punishMedicine: Bool {
    get {return _storage._punishMedicine}
    set {_uniqueStorage()._punishMedicine = newValue}
  }

  var forPortal: Bool {
    get {return _storage._forPortal}
    set {_uniqueStorage()._forPortal = newValue}
  }

  var businessText: String {
    get {return _storage._businessText}
    set {_uniqueStorage()._businessText = newValue}
  }

  var cnyGift: Bool {
    get {return _storage._cnyGift}
    set {_uniqueStorage()._cnyGift = newValue}
  }

  var appID: Int64 {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var vipLevel: Int64 {
    get {return _storage._vipLevel}
    set {_uniqueStorage()._vipLevel = newValue}
  }

  var isGray: Bool {
    get {return _storage._isGray}
    set {_uniqueStorage()._isGray = newValue}
  }

  var graySchemeURL: String {
    get {return _storage._graySchemeURL}
    set {_uniqueStorage()._graySchemeURL = newValue}
  }

  var giftScene: Int64 {
    get {return _storage._giftScene}
    set {_uniqueStorage()._giftScene = newValue}
  }

  var giftBanner: GiftBanner {
    get {return _storage._giftBanner ?? GiftBanner()}
    set {_uniqueStorage()._giftBanner = newValue}
  }
  /// Returns true if `giftBanner` has been explicitly set.
  var hasGiftBanner: Bool {return _storage._giftBanner != nil}
  /// Clears the value of `giftBanner`. Subsequent reads from it will return its default value.
  mutating func clearGiftBanner() {_uniqueStorage()._giftBanner = nil}

  var triggerWords: [String] {
    get {return _storage._triggerWords}
    set {_uniqueStorage()._triggerWords = newValue}
  }

  var giftBuffInfos: [GiftBuffInfo] {
    get {return _storage._giftBuffInfos}
    set {_uniqueStorage()._giftBuffInfos = newValue}
  }

  var forFirstRecharge: Bool {
    get {return _storage._forFirstRecharge}
    set {_uniqueStorage()._forFirstRecharge = newValue}
  }

  var dynamicImgForSelected: Image {
    get {return _storage._dynamicImgForSelected ?? Image()}
    set {_uniqueStorage()._dynamicImgForSelected = newValue}
  }
  /// Returns true if `dynamicImgForSelected` has been explicitly set.
  var hasDynamicImgForSelected: Bool {return _storage._dynamicImgForSelected != nil}
  /// Clears the value of `dynamicImgForSelected`. Subsequent reads from it will return its default value.
  mutating func clearDynamicImgForSelected() {_uniqueStorage()._dynamicImgForSelected = nil}

  var afterSendAction: Int32 {
    get {return _storage._afterSendAction}
    set {_uniqueStorage()._afterSendAction = newValue}
  }

  var giftOfflineTime: Int64 {
    get {return _storage._giftOfflineTime}
    set {_uniqueStorage()._giftOfflineTime = newValue}
  }

  var topBarText: String {
    get {return _storage._topBarText}
    set {_uniqueStorage()._topBarText = newValue}
  }

  var topRightAvatar: Image {
    get {return _storage._topRightAvatar ?? Image()}
    set {_uniqueStorage()._topRightAvatar = newValue}
  }
  /// Returns true if `topRightAvatar` has been explicitly set.
  var hasTopRightAvatar: Bool {return _storage._topRightAvatar != nil}
  /// Clears the value of `topRightAvatar`. Subsequent reads from it will return its default value.
  mutating func clearTopRightAvatar() {_uniqueStorage()._topRightAvatar = nil}

  var bannerSchemeURL: String {
    get {return _storage._bannerSchemeURL}
    set {_uniqueStorage()._bannerSchemeURL = newValue}
  }

  var isLocked: Bool {
    get {return _storage._isLocked}
    set {_uniqueStorage()._isLocked = newValue}
  }

  var reqExtraType: Int64 {
    get {return _storage._reqExtraType}
    set {_uniqueStorage()._reqExtraType = newValue}
  }

  var assetIds: [Int64] {
    get {return _storage._assetIds}
    set {_uniqueStorage()._assetIds = newValue}
  }

  var giftPreviewInfo: GiftPreviewInfo {
    get {return _storage._giftPreviewInfo ?? GiftPreviewInfo()}
    set {_uniqueStorage()._giftPreviewInfo = newValue}
  }
  /// Returns true if `giftPreviewInfo` has been explicitly set.
  var hasGiftPreviewInfo: Bool {return _storage._giftPreviewInfo != nil}
  /// Clears the value of `giftPreviewInfo`. Subsequent reads from it will return its default value.
  mutating func clearGiftPreviewInfo() {_uniqueStorage()._giftPreviewInfo = nil}

  var giftTip: GiftTip {
    get {return _storage._giftTip ?? GiftTip()}
    set {_uniqueStorage()._giftTip = newValue}
  }
  /// Returns true if `giftTip` has been explicitly set.
  var hasGiftTip: Bool {return _storage._giftTip != nil}
  /// Clears the value of `giftTip`. Subsequent reads from it will return its default value.
  mutating func clearGiftTip() {_uniqueStorage()._giftTip = nil}

  var needSweepLightCount: Int32 {
    get {return _storage._needSweepLightCount}
    set {_uniqueStorage()._needSweepLightCount = newValue}
  }

  var groupInfo: [GiftGroupInfo] {
    get {return _storage._groupInfo}
    set {_uniqueStorage()._groupInfo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct GiftStructFansClubInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var minLevel: Int32 = 0

    var insertPos: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AssetEffectMixInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct LuckyMoneyGiftMeta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftPanelOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftBanner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftBuffInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftPreviewInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftTip {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GiftGroupInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EffectMixImageInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "cursor"),
    3: .same(proto: "fetchInterval"),
    4: .same(proto: "now"),
    5: .same(proto: "internalExt"),
    6: .same(proto: "fetchType"),
    7: .same(proto: "routeParams"),
    8: .same(proto: "heartbeatDuration"),
    9: .same(proto: "needAck"),
    10: .same(proto: "pushServer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cursor) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.fetchInterval) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.now) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.internalExt) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.fetchType) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.routeParams) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.heartbeatDuration) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.needAck) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.pushServer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 2)
    }
    if self.fetchInterval != 0 {
      try visitor.visitSingularInt64Field(value: self.fetchInterval, fieldNumber: 3)
    }
    if self.now != 0 {
      try visitor.visitSingularInt64Field(value: self.now, fieldNumber: 4)
    }
    if !self.internalExt.isEmpty {
      try visitor.visitSingularStringField(value: self.internalExt, fieldNumber: 5)
    }
    if self.fetchType != 0 {
      try visitor.visitSingularInt32Field(value: self.fetchType, fieldNumber: 6)
    }
    if !self.routeParams.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.routeParams, fieldNumber: 7)
    }
    if self.heartbeatDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.heartbeatDuration, fieldNumber: 8)
    }
    if self.needAck != false {
      try visitor.visitSingularBoolField(value: self.needAck, fieldNumber: 9)
    }
    if !self.pushServer.isEmpty {
      try visitor.visitSingularStringField(value: self.pushServer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response, rhs: Response) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.cursor != rhs.cursor {return false}
    if lhs.fetchInterval != rhs.fetchInterval {return false}
    if lhs.now != rhs.now {return false}
    if lhs.internalExt != rhs.internalExt {return false}
    if lhs.fetchType != rhs.fetchType {return false}
    if lhs.routeParams != rhs.routeParams {return false}
    if lhs.heartbeatDuration != rhs.heartbeatDuration {return false}
    if lhs.needAck != rhs.needAck {return false}
    if lhs.pushServer != rhs.pushServer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "method"),
    2: .same(proto: "payload"),
    3: .same(proto: "msgId"),
    4: .same(proto: "msgType"),
    5: .same(proto: "offset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.method) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.msgID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.msgType) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.offset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.method.isEmpty {
      try visitor.visitSingularStringField(value: self.method, fieldNumber: 1)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 2)
    }
    if self.msgID != 0 {
      try visitor.visitSingularInt64Field(value: self.msgID, fieldNumber: 3)
    }
    if self.msgType != 0 {
      try visitor.visitSingularInt32Field(value: self.msgType, fieldNumber: 4)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Message, rhs: Message) -> Bool {
    if lhs.method != rhs.method {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.msgID != rhs.msgID {return false}
    if lhs.msgType != rhs.msgType {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomUserSeqMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RoomUserSeqMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "ranks"),
    3: .same(proto: "total"),
    4: .same(proto: "popStr"),
    5: .same(proto: "seats"),
    6: .same(proto: "popularity"),
    7: .same(proto: "totalUser"),
    8: .same(proto: "totalUserStr"),
    9: .same(proto: "totalStr"),
    10: .same(proto: "onlineUserForAnchor"),
    11: .same(proto: "totalPvForAnchor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.ranks) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.popStr) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.seats) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.popularity) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.totalUser) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.totalUserStr) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.totalStr) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.onlineUserForAnchor) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.totalPvForAnchor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.ranks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ranks, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 3)
    }
    if !self.popStr.isEmpty {
      try visitor.visitSingularStringField(value: self.popStr, fieldNumber: 4)
    }
    if !self.seats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seats, fieldNumber: 5)
    }
    if self.popularity != 0 {
      try visitor.visitSingularInt64Field(value: self.popularity, fieldNumber: 6)
    }
    if self.totalUser != 0 {
      try visitor.visitSingularInt64Field(value: self.totalUser, fieldNumber: 7)
    }
    if !self.totalUserStr.isEmpty {
      try visitor.visitSingularStringField(value: self.totalUserStr, fieldNumber: 8)
    }
    if !self.totalStr.isEmpty {
      try visitor.visitSingularStringField(value: self.totalStr, fieldNumber: 9)
    }
    if !self.onlineUserForAnchor.isEmpty {
      try visitor.visitSingularStringField(value: self.onlineUserForAnchor, fieldNumber: 10)
    }
    if !self.totalPvForAnchor.isEmpty {
      try visitor.visitSingularStringField(value: self.totalPvForAnchor, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomUserSeqMessage, rhs: RoomUserSeqMessage) -> Bool {
    if lhs._common != rhs._common {return false}
    if lhs.ranks != rhs.ranks {return false}
    if lhs.total != rhs.total {return false}
    if lhs.popStr != rhs.popStr {return false}
    if lhs.seats != rhs.seats {return false}
    if lhs.popularity != rhs.popularity {return false}
    if lhs.totalUser != rhs.totalUser {return false}
    if lhs.totalUserStr != rhs.totalUserStr {return false}
    if lhs.totalStr != rhs.totalStr {return false}
    if lhs.onlineUserForAnchor != rhs.onlineUserForAnchor {return false}
    if lhs.totalPvForAnchor != rhs.totalPvForAnchor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomUserSeqMessage.Contributor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RoomUserSeqMessage.protoMessageName + ".Contributor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "user"),
    3: .same(proto: "rank"),
    4: .same(proto: "delta"),
    5: .same(proto: "isHidden"),
    6: .same(proto: "scoreDescription"),
    7: .same(proto: "exactlyScore"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.score) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.rank) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.delta) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isHidden) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.scoreDescription) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.exactlyScore) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.score != 0 {
      try visitor.visitSingularInt64Field(value: self.score, fieldNumber: 1)
    }
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.rank != 0 {
      try visitor.visitSingularInt64Field(value: self.rank, fieldNumber: 3)
    }
    if self.delta != 0 {
      try visitor.visitSingularInt64Field(value: self.delta, fieldNumber: 4)
    }
    if self.isHidden != false {
      try visitor.visitSingularBoolField(value: self.isHidden, fieldNumber: 5)
    }
    if !self.scoreDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.scoreDescription, fieldNumber: 6)
    }
    if !self.exactlyScore.isEmpty {
      try visitor.visitSingularStringField(value: self.exactlyScore, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomUserSeqMessage.Contributor, rhs: RoomUserSeqMessage.Contributor) -> Bool {
    if lhs.score != rhs.score {return false}
    if lhs._user != rhs._user {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.delta != rhs.delta {return false}
    if lhs.isHidden != rhs.isHidden {return false}
    if lhs.scoreDescription != rhs.scoreDescription {return false}
    if lhs.exactlyScore != rhs.exactlyScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "giftId"),
    3: .same(proto: "fanTicketCount"),
    4: .same(proto: "groupCount"),
    5: .same(proto: "repeatCount"),
    6: .same(proto: "comboCount"),
    7: .same(proto: "user"),
    8: .same(proto: "toUser"),
    9: .same(proto: "repeatEnd"),
    10: .same(proto: "textEffect"),
    11: .same(proto: "groupId"),
    12: .same(proto: "incomeTaskgifts"),
    13: .same(proto: "roomFanTicketCount"),
    14: .same(proto: "priority"),
    15: .same(proto: "gift"),
    16: .same(proto: "logId"),
    17: .same(proto: "sendType"),
    18: .same(proto: "publicAreaCommon"),
    19: .same(proto: "trayDisplayText"),
    20: .same(proto: "bannedDisplayEffects"),
    21: .same(proto: "trayInfo"),
    24: .same(proto: "assetEffectMixInfo"),
  ]

  fileprivate class _StorageClass {
    var _common: Common? = nil
    var _giftID: Int64 = 0
    var _fanTicketCount: Int64 = 0
    var _groupCount: Int64 = 0
    var _repeatCount: Int64 = 0
    var _comboCount: Int64 = 0
    var _user: User? = nil
    var _toUser: User? = nil
    var _repeatEnd: Int32 = 0
    var _textEffect: GiftMessage.TextEffect? = nil
    var _groupID: Int64 = 0
    var _incomeTaskgifts: Int64 = 0
    var _roomFanTicketCount: Int64 = 0
    var _priority: GiftIMPriority? = nil
    var _gift: GiftStruct? = nil
    var _logID: String = String()
    var _sendType: Int64 = 0
    var _publicAreaCommon: PublicAreaCommon? = nil
    var _trayDisplayText: Text? = nil
    var _bannedDisplayEffects: Int64 = 0
    var _trayInfo: GiftTrayInfo? = nil
    var _assetEffectMixInfo: AssetEffectMixInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _common = source._common
      _giftID = source._giftID
      _fanTicketCount = source._fanTicketCount
      _groupCount = source._groupCount
      _repeatCount = source._repeatCount
      _comboCount = source._comboCount
      _user = source._user
      _toUser = source._toUser
      _repeatEnd = source._repeatEnd
      _textEffect = source._textEffect
      _groupID = source._groupID
      _incomeTaskgifts = source._incomeTaskgifts
      _roomFanTicketCount = source._roomFanTicketCount
      _priority = source._priority
      _gift = source._gift
      _logID = source._logID
      _sendType = source._sendType
      _publicAreaCommon = source._publicAreaCommon
      _trayDisplayText = source._trayDisplayText
      _bannedDisplayEffects = source._bannedDisplayEffects
      _trayInfo = source._trayInfo
      _assetEffectMixInfo = source._assetEffectMixInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._common) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._giftID) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._fanTicketCount) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._groupCount) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._repeatCount) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._comboCount) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._toUser) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._repeatEnd) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._textEffect) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._groupID) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._incomeTaskgifts) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._roomFanTicketCount) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._priority) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._gift) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._logID) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._sendType) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._publicAreaCommon) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._trayDisplayText) }()
        case 20: try { try decoder.decodeSingularInt64Field(value: &_storage._bannedDisplayEffects) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._trayInfo) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._assetEffectMixInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._common {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._giftID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._giftID, fieldNumber: 2)
      }
      if _storage._fanTicketCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._fanTicketCount, fieldNumber: 3)
      }
      if _storage._groupCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupCount, fieldNumber: 4)
      }
      if _storage._repeatCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._repeatCount, fieldNumber: 5)
      }
      if _storage._comboCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._comboCount, fieldNumber: 6)
      }
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._toUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._repeatEnd != 0 {
        try visitor.visitSingularInt32Field(value: _storage._repeatEnd, fieldNumber: 9)
      }
      try { if let v = _storage._textEffect {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._groupID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._groupID, fieldNumber: 11)
      }
      if _storage._incomeTaskgifts != 0 {
        try visitor.visitSingularInt64Field(value: _storage._incomeTaskgifts, fieldNumber: 12)
      }
      if _storage._roomFanTicketCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._roomFanTicketCount, fieldNumber: 13)
      }
      try { if let v = _storage._priority {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._gift {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._logID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logID, fieldNumber: 16)
      }
      if _storage._sendType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sendType, fieldNumber: 17)
      }
      try { if let v = _storage._publicAreaCommon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._trayDisplayText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      if _storage._bannedDisplayEffects != 0 {
        try visitor.visitSingularInt64Field(value: _storage._bannedDisplayEffects, fieldNumber: 20)
      }
      try { if let v = _storage._trayInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._assetEffectMixInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftMessage, rhs: GiftMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._common != rhs_storage._common {return false}
        if _storage._giftID != rhs_storage._giftID {return false}
        if _storage._fanTicketCount != rhs_storage._fanTicketCount {return false}
        if _storage._groupCount != rhs_storage._groupCount {return false}
        if _storage._repeatCount != rhs_storage._repeatCount {return false}
        if _storage._comboCount != rhs_storage._comboCount {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._toUser != rhs_storage._toUser {return false}
        if _storage._repeatEnd != rhs_storage._repeatEnd {return false}
        if _storage._textEffect != rhs_storage._textEffect {return false}
        if _storage._groupID != rhs_storage._groupID {return false}
        if _storage._incomeTaskgifts != rhs_storage._incomeTaskgifts {return false}
        if _storage._roomFanTicketCount != rhs_storage._roomFanTicketCount {return false}
        if _storage._priority != rhs_storage._priority {return false}
        if _storage._gift != rhs_storage._gift {return false}
        if _storage._logID != rhs_storage._logID {return false}
        if _storage._sendType != rhs_storage._sendType {return false}
        if _storage._publicAreaCommon != rhs_storage._publicAreaCommon {return false}
        if _storage._trayDisplayText != rhs_storage._trayDisplayText {return false}
        if _storage._bannedDisplayEffects != rhs_storage._bannedDisplayEffects {return false}
        if _storage._trayInfo != rhs_storage._trayInfo {return false}
        if _storage._assetEffectMixInfo != rhs_storage._assetEffectMixInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftMessage.TextEffect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GiftMessage.protoMessageName + ".TextEffect"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "portrait"),
    2: .same(proto: "landscape"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._portrait) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._landscape) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._portrait {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._landscape {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftMessage.TextEffect, rhs: GiftMessage.TextEffect) -> Bool {
    if lhs._portrait != rhs._portrait {return false}
    if lhs._landscape != rhs._landscape {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftMessage.TextEffect.Detail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GiftMessage.TextEffect.protoMessageName + ".Detail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "textFontSize"),
    3: .same(proto: "background"),
    4: .same(proto: "start"),
    5: .same(proto: "duration"),
    6: .same(proto: "x"),
    7: .same(proto: "y"),
    8: .same(proto: "width"),
    9: .same(proto: "height"),
    10: .same(proto: "shadowDx"),
    11: .same(proto: "shadowDy"),
    12: .same(proto: "shadowRadius"),
    13: .same(proto: "shadowColor"),
    14: .same(proto: "strokeColor"),
    15: .same(proto: "strokeWidth"),
  ]

  fileprivate class _StorageClass {
    var _text: Text? = nil
    var _textFontSize: Int32 = 0
    var _background: Image? = nil
    var _start: Int32 = 0
    var _duration: Int32 = 0
    var _x: Int32 = 0
    var _y: Int32 = 0
    var _width: Int32 = 0
    var _height: Int32 = 0
    var _shadowDx: Int32 = 0
    var _shadowDy: Int32 = 0
    var _shadowRadius: Int32 = 0
    var _shadowColor: String = String()
    var _strokeColor: String = String()
    var _strokeWidth: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _textFontSize = source._textFontSize
      _background = source._background
      _start = source._start
      _duration = source._duration
      _x = source._x
      _y = source._y
      _width = source._width
      _height = source._height
      _shadowDx = source._shadowDx
      _shadowDy = source._shadowDy
      _shadowRadius = source._shadowRadius
      _shadowColor = source._shadowColor
      _strokeColor = source._strokeColor
      _strokeWidth = source._strokeWidth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._text) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._textFontSize) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._background) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._start) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._duration) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._x) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._y) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._width) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._height) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._shadowDx) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._shadowDy) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._shadowRadius) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._shadowColor) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._strokeColor) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._strokeWidth) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._text {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._textFontSize != 0 {
        try visitor.visitSingularInt32Field(value: _storage._textFontSize, fieldNumber: 2)
      }
      try { if let v = _storage._background {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._start != 0 {
        try visitor.visitSingularInt32Field(value: _storage._start, fieldNumber: 4)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 5)
      }
      if _storage._x != 0 {
        try visitor.visitSingularInt32Field(value: _storage._x, fieldNumber: 6)
      }
      if _storage._y != 0 {
        try visitor.visitSingularInt32Field(value: _storage._y, fieldNumber: 7)
      }
      if _storage._width != 0 {
        try visitor.visitSingularInt32Field(value: _storage._width, fieldNumber: 8)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt32Field(value: _storage._height, fieldNumber: 9)
      }
      if _storage._shadowDx != 0 {
        try visitor.visitSingularInt32Field(value: _storage._shadowDx, fieldNumber: 10)
      }
      if _storage._shadowDy != 0 {
        try visitor.visitSingularInt32Field(value: _storage._shadowDy, fieldNumber: 11)
      }
      if _storage._shadowRadius != 0 {
        try visitor.visitSingularInt32Field(value: _storage._shadowRadius, fieldNumber: 12)
      }
      if !_storage._shadowColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shadowColor, fieldNumber: 13)
      }
      if !_storage._strokeColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._strokeColor, fieldNumber: 14)
      }
      if _storage._strokeWidth != 0 {
        try visitor.visitSingularInt32Field(value: _storage._strokeWidth, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftMessage.TextEffect.Detail, rhs: GiftMessage.TextEffect.Detail) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._text != rhs_storage._text {return false}
        if _storage._textFontSize != rhs_storage._textFontSize {return false}
        if _storage._background != rhs_storage._background {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._x != rhs_storage._x {return false}
        if _storage._y != rhs_storage._y {return false}
        if _storage._width != rhs_storage._width {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._shadowDx != rhs_storage._shadowDx {return false}
        if _storage._shadowDy != rhs_storage._shadowDy {return false}
        if _storage._shadowRadius != rhs_storage._shadowRadius {return false}
        if _storage._shadowColor != rhs_storage._shadowColor {return false}
        if _storage._strokeColor != rhs_storage._strokeColor {return false}
        if _storage._strokeWidth != rhs_storage._strokeWidth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LikeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LikeMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "count"),
    3: .same(proto: "total"),
    4: .same(proto: "color"),
    5: .same(proto: "user"),
    6: .same(proto: "icon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._common) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.color) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._common {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 3)
    }
    if self.color != 0 {
      try visitor.visitSingularInt64Field(value: self.color, fieldNumber: 4)
    }
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LikeMessage, rhs: LikeMessage) -> Bool {
    if lhs._common != rhs._common {return false}
    if lhs.count != rhs.count {return false}
    if lhs.total != rhs.total {return false}
    if lhs.color != rhs.color {return false}
    if lhs._user != rhs._user {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChatMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "user"),
    3: .same(proto: "content"),
    4: .same(proto: "visibleToSender"),
    5: .same(proto: "backgroundImage"),
    6: .same(proto: "fullScreenTextColor"),
    7: .same(proto: "backgroundImageV2"),
    9: .same(proto: "publicAreaCommon"),
    10: .same(proto: "giftImage"),
  ]

  fileprivate class _StorageClass {
    var _common: Common? = nil
    var _user: User? = nil
    var _content: String = String()
    var _visibleToSender: Bool = false
    var _backgroundImage: Image? = nil
    var _fullScreenTextColor: String = String()
    var _backgroundImageV2: Image? = nil
    var _publicAreaCommon: PublicAreaCommon? = nil
    var _giftImage: Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _common = source._common
      _user = source._user
      _content = source._content
      _visibleToSender = source._visibleToSender
      _backgroundImage = source._backgroundImage
      _fullScreenTextColor = source._fullScreenTextColor
      _backgroundImageV2 = source._backgroundImageV2
      _publicAreaCommon = source._publicAreaCommon
      _giftImage = source._giftImage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._common) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._content) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._visibleToSender) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundImage) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._fullScreenTextColor) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundImageV2) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._publicAreaCommon) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._giftImage) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._common {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 3)
      }
      if _storage._visibleToSender != false {
        try visitor.visitSingularBoolField(value: _storage._visibleToSender, fieldNumber: 4)
      }
      try { if let v = _storage._backgroundImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._fullScreenTextColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fullScreenTextColor, fieldNumber: 6)
      }
      try { if let v = _storage._backgroundImageV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._publicAreaCommon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._giftImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ChatMessage, rhs: ChatMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._common != rhs_storage._common {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._visibleToSender != rhs_storage._visibleToSender {return false}
        if _storage._backgroundImage != rhs_storage._backgroundImage {return false}
        if _storage._fullScreenTextColor != rhs_storage._fullScreenTextColor {return false}
        if _storage._backgroundImageV2 != rhs_storage._backgroundImageV2 {return false}
        if _storage._publicAreaCommon != rhs_storage._publicAreaCommon {return false}
        if _storage._giftImage != rhs_storage._giftImage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SocialMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SocialMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "user"),
    3: .same(proto: "shareType"),
    4: .same(proto: "action"),
    5: .same(proto: "shareTarget"),
    6: .same(proto: "followCount"),
    7: .same(proto: "publicAreaCommon"),
  ]

  fileprivate class _StorageClass {
    var _common: Common? = nil
    var _user: User? = nil
    var _shareType: Int64 = 0
    var _action: Int64 = 0
    var _shareTarget: String = String()
    var _followCount: Int64 = 0
    var _publicAreaCommon: PublicAreaCommon? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _common = source._common
      _user = source._user
      _shareType = source._shareType
      _action = source._action
      _shareTarget = source._shareTarget
      _followCount = source._followCount
      _publicAreaCommon = source._publicAreaCommon
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._common) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._shareType) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._action) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._shareTarget) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._followCount) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._publicAreaCommon) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._common {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._shareType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shareType, fieldNumber: 3)
      }
      if _storage._action != 0 {
        try visitor.visitSingularInt64Field(value: _storage._action, fieldNumber: 4)
      }
      if !_storage._shareTarget.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shareTarget, fieldNumber: 5)
      }
      if _storage._followCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._followCount, fieldNumber: 6)
      }
      try { if let v = _storage._publicAreaCommon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SocialMessage, rhs: SocialMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._common != rhs_storage._common {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._shareType != rhs_storage._shareType {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._shareTarget != rhs_storage._shareTarget {return false}
        if _storage._followCount != rhs_storage._followCount {return false}
        if _storage._publicAreaCommon != rhs_storage._publicAreaCommon {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MemberMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MemberMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "common"),
    2: .same(proto: "user"),
    3: .same(proto: "memberCount"),
    4: .same(proto: "operator"),
    5: .same(proto: "isSetToAdmin"),
    6: .same(proto: "isTopUser"),
    7: .same(proto: "rankScore"),
    8: .same(proto: "topUserNo"),
    9: .same(proto: "enterType"),
    10: .same(proto: "action"),
    11: .same(proto: "actionDescription"),
    12: .same(proto: "userId"),
    13: .same(proto: "effectConfig"),
    14: .same(proto: "popStr"),
    15: .same(proto: "enterEffectConfig"),
    16: .same(proto: "backgroundImage"),
    17: .same(proto: "backgroundImageV2"),
    18: .same(proto: "anchorDisplayText"),
    19: .same(proto: "publicAreaCommon"),
  ]

  fileprivate class _StorageClass {
    var _common: Common? = nil
    var _user: User? = nil
    var _memberCount: Int64 = 0
    var _operator: User? = nil
    var _isSetToAdmin: Bool = false
    var _isTopUser: Bool = false
    var _rankScore: Int64 = 0
    var _topUserNo: Int64 = 0
    var _enterType: Int64 = 0
    var _action: Int64 = 0
    var _actionDescription: String = String()
    var _userID: Int64 = 0
    var _effectConfig: MemberMessage.EffectConfig? = nil
    var _popStr: String = String()
    var _enterEffectConfig: MemberMessage.EffectConfig? = nil
    var _backgroundImage: Image? = nil
    var _backgroundImageV2: Image? = nil
    var _anchorDisplayText: Text? = nil
    var _publicAreaCommon: PublicAreaCommon? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _common = source._common
      _user = source._user
      _memberCount = source._memberCount
      _operator = source._operator
      _isSetToAdmin = source._isSetToAdmin
      _isTopUser = source._isTopUser
      _rankScore = source._rankScore
      _topUserNo = source._topUserNo
      _enterType = source._enterType
      _action = source._action
      _actionDescription = source._actionDescription
      _userID = source._userID
      _effectConfig = source._effectConfig
      _popStr = source._popStr
      _enterEffectConfig = source._enterEffectConfig
      _backgroundImage = source._backgroundImage
      _backgroundImageV2 = source._backgroundImageV2
      _anchorDisplayText = source._anchorDisplayText
      _publicAreaCommon = source._publicAreaCommon
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._common) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._memberCount) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._operator) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._isSetToAdmin) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isTopUser) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._rankScore) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._topUserNo) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._enterType) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._action) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._actionDescription) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._userID) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._effectConfig) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._popStr) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._enterEffectConfig) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundImage) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundImageV2) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._anchorDisplayText) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._publicAreaCommon) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._common {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._memberCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._memberCount, fieldNumber: 3)
      }
      try { if let v = _storage._operator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._isSetToAdmin != false {
        try visitor.visitSingularBoolField(value: _storage._isSetToAdmin, fieldNumber: 5)
      }
      if _storage._isTopUser != false {
        try visitor.visitSingularBoolField(value: _storage._isTopUser, fieldNumber: 6)
      }
      if _storage._rankScore != 0 {
        try visitor.visitSingularInt64Field(value: _storage._rankScore, fieldNumber: 7)
      }
      if _storage._topUserNo != 0 {
        try visitor.visitSingularInt64Field(value: _storage._topUserNo, fieldNumber: 8)
      }
      if _storage._enterType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._enterType, fieldNumber: 9)
      }
      if _storage._action != 0 {
        try visitor.visitSingularInt64Field(value: _storage._action, fieldNumber: 10)
      }
      if !_storage._actionDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._actionDescription, fieldNumber: 11)
      }
      if _storage._userID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userID, fieldNumber: 12)
      }
      try { if let v = _storage._effectConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      if !_storage._popStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._popStr, fieldNumber: 14)
      }
      try { if let v = _storage._enterEffectConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._backgroundImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._backgroundImageV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._anchorDisplayText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._publicAreaCommon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MemberMessage, rhs: MemberMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._common != rhs_storage._common {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._memberCount != rhs_storage._memberCount {return false}
        if _storage._operator != rhs_storage._operator {return false}
        if _storage._isSetToAdmin != rhs_storage._isSetToAdmin {return false}
        if _storage._isTopUser != rhs_storage._isTopUser {return false}
        if _storage._rankScore != rhs_storage._rankScore {return false}
        if _storage._topUserNo != rhs_storage._topUserNo {return false}
        if _storage._enterType != rhs_storage._enterType {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._actionDescription != rhs_storage._actionDescription {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._effectConfig != rhs_storage._effectConfig {return false}
        if _storage._popStr != rhs_storage._popStr {return false}
        if _storage._enterEffectConfig != rhs_storage._enterEffectConfig {return false}
        if _storage._backgroundImage != rhs_storage._backgroundImage {return false}
        if _storage._backgroundImageV2 != rhs_storage._backgroundImageV2 {return false}
        if _storage._anchorDisplayText != rhs_storage._anchorDisplayText {return false}
        if _storage._publicAreaCommon != rhs_storage._publicAreaCommon {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MemberMessage.EffectConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = MemberMessage.protoMessageName + ".EffectConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "icon"),
    3: .same(proto: "avatarPos"),
    4: .same(proto: "text"),
    5: .same(proto: "textIcon"),
    6: .same(proto: "stayTime"),
    7: .same(proto: "animAssetId"),
    8: .same(proto: "badge"),
    9: .same(proto: "flexSettingArray"),
    10: .same(proto: "textIconOverlay"),
    11: .same(proto: "animatedBadge"),
    12: .same(proto: "hasSweepLight"),
    13: .same(proto: "textFlexSettingArray"),
    14: .same(proto: "centerAnimAssetId"),
  ]

  fileprivate class _StorageClass {
    var _type: Int64 = 0
    var _icon: Image? = nil
    var _avatarPos: Int64 = 0
    var _text: Text? = nil
    var _textIcon: Image? = nil
    var _stayTime: Int32 = 0
    var _animAssetID: Int64 = 0
    var _badge: Image? = nil
    var _flexSettingArray: [Int64] = []
    var _textIconOverlay: Image? = nil
    var _animatedBadge: Image? = nil
    var _hasSweepLight_p: Bool = false
    var _textFlexSettingArray: [Int64] = []
    var _centerAnimAssetID: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _icon = source._icon
      _avatarPos = source._avatarPos
      _text = source._text
      _textIcon = source._textIcon
      _stayTime = source._stayTime
      _animAssetID = source._animAssetID
      _badge = source._badge
      _flexSettingArray = source._flexSettingArray
      _textIconOverlay = source._textIconOverlay
      _animatedBadge = source._animatedBadge
      _hasSweepLight_p = source._hasSweepLight_p
      _textFlexSettingArray = source._textFlexSettingArray
      _centerAnimAssetID = source._centerAnimAssetID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._icon) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._avatarPos) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._text) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._textIcon) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._stayTime) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._animAssetID) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._badge) }()
        case 9: try { try decoder.decodeRepeatedInt64Field(value: &_storage._flexSettingArray) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._textIconOverlay) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._animatedBadge) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._hasSweepLight_p) }()
        case 13: try { try decoder.decodeRepeatedInt64Field(value: &_storage._textFlexSettingArray) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._centerAnimAssetID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != 0 {
        try visitor.visitSingularInt64Field(value: _storage._type, fieldNumber: 1)
      }
      try { if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._avatarPos != 0 {
        try visitor.visitSingularInt64Field(value: _storage._avatarPos, fieldNumber: 3)
      }
      try { if let v = _storage._text {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._textIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._stayTime != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stayTime, fieldNumber: 6)
      }
      if _storage._animAssetID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._animAssetID, fieldNumber: 7)
      }
      try { if let v = _storage._badge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._flexSettingArray.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._flexSettingArray, fieldNumber: 9)
      }
      try { if let v = _storage._textIconOverlay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._animatedBadge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if _storage._hasSweepLight_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasSweepLight_p, fieldNumber: 12)
      }
      if !_storage._textFlexSettingArray.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._textFlexSettingArray, fieldNumber: 13)
      }
      if _storage._centerAnimAssetID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._centerAnimAssetID, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MemberMessage.EffectConfig, rhs: MemberMessage.EffectConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._icon != rhs_storage._icon {return false}
        if _storage._avatarPos != rhs_storage._avatarPos {return false}
        if _storage._text != rhs_storage._text {return false}
        if _storage._textIcon != rhs_storage._textIcon {return false}
        if _storage._stayTime != rhs_storage._stayTime {return false}
        if _storage._animAssetID != rhs_storage._animAssetID {return false}
        if _storage._badge != rhs_storage._badge {return false}
        if _storage._flexSettingArray != rhs_storage._flexSettingArray {return false}
        if _storage._textIconOverlay != rhs_storage._textIconOverlay {return false}
        if _storage._animatedBadge != rhs_storage._animatedBadge {return false}
        if _storage._hasSweepLight_p != rhs_storage._hasSweepLight_p {return false}
        if _storage._textFlexSettingArray != rhs_storage._textFlexSettingArray {return false}
        if _storage._centerAnimAssetID != rhs_storage._centerAnimAssetID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Common"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "method"),
    2: .same(proto: "msgId"),
    3: .same(proto: "roomId"),
    4: .same(proto: "createTime"),
    5: .same(proto: "monitor"),
    6: .same(proto: "isShowMsg"),
    7: .same(proto: "describe"),
    8: .same(proto: "displayText"),
    9: .same(proto: "foldType"),
    10: .same(proto: "anchorFoldType"),
    11: .same(proto: "priorityScore"),
    12: .same(proto: "logId"),
    13: .same(proto: "msgProcessFilterK"),
    14: .same(proto: "msgProcessFilterV"),
    15: .same(proto: "user"),
    16: .same(proto: "room"),
    17: .same(proto: "anchorFoldTypeV2"),
    18: .same(proto: "processAtSeiTimeMs"),
  ]

  fileprivate class _StorageClass {
    var _method: String = String()
    var _msgID: Int64 = 0
    var _roomID: Int64 = 0
    var _createTime: Int64 = 0
    var _monitor: Int32 = 0
    var _isShowMsg: Bool = false
    var _describe: String = String()
    var _displayText: Text? = nil
    var _foldType: Int64 = 0
    var _anchorFoldType: Int64 = 0
    var _priorityScore: Int64 = 0
    var _logID: String = String()
    var _msgProcessFilterK: String = String()
    var _msgProcessFilterV: String = String()
    var _user: User? = nil
    var _room: Room? = nil
    var _anchorFoldTypeV2: Int64 = 0
    var _processAtSeiTimeMs: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _method = source._method
      _msgID = source._msgID
      _roomID = source._roomID
      _createTime = source._createTime
      _monitor = source._monitor
      _isShowMsg = source._isShowMsg
      _describe = source._describe
      _displayText = source._displayText
      _foldType = source._foldType
      _anchorFoldType = source._anchorFoldType
      _priorityScore = source._priorityScore
      _logID = source._logID
      _msgProcessFilterK = source._msgProcessFilterK
      _msgProcessFilterV = source._msgProcessFilterV
      _user = source._user
      _room = source._room
      _anchorFoldTypeV2 = source._anchorFoldTypeV2
      _processAtSeiTimeMs = source._processAtSeiTimeMs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._method) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._msgID) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._roomID) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._createTime) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._monitor) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isShowMsg) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._describe) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._displayText) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._foldType) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._anchorFoldType) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._priorityScore) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._logID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._msgProcessFilterK) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._msgProcessFilterV) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._room) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._anchorFoldTypeV2) }()
        case 18: try { try decoder.decodeSingularInt64Field(value: &_storage._processAtSeiTimeMs) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._method.isEmpty {
        try visitor.visitSingularStringField(value: _storage._method, fieldNumber: 1)
      }
      if _storage._msgID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._msgID, fieldNumber: 2)
      }
      if _storage._roomID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._roomID, fieldNumber: 3)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 4)
      }
      if _storage._monitor != 0 {
        try visitor.visitSingularInt32Field(value: _storage._monitor, fieldNumber: 5)
      }
      if _storage._isShowMsg != false {
        try visitor.visitSingularBoolField(value: _storage._isShowMsg, fieldNumber: 6)
      }
      if !_storage._describe.isEmpty {
        try visitor.visitSingularStringField(value: _storage._describe, fieldNumber: 7)
      }
      try { if let v = _storage._displayText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if _storage._foldType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._foldType, fieldNumber: 9)
      }
      if _storage._anchorFoldType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._anchorFoldType, fieldNumber: 10)
      }
      if _storage._priorityScore != 0 {
        try visitor.visitSingularInt64Field(value: _storage._priorityScore, fieldNumber: 11)
      }
      if !_storage._logID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logID, fieldNumber: 12)
      }
      if !_storage._msgProcessFilterK.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgProcessFilterK, fieldNumber: 13)
      }
      if !_storage._msgProcessFilterV.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msgProcessFilterV, fieldNumber: 14)
      }
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._room {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      if _storage._anchorFoldTypeV2 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._anchorFoldTypeV2, fieldNumber: 17)
      }
      if _storage._processAtSeiTimeMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._processAtSeiTimeMs, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Common, rhs: Common) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._method != rhs_storage._method {return false}
        if _storage._msgID != rhs_storage._msgID {return false}
        if _storage._roomID != rhs_storage._roomID {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._monitor != rhs_storage._monitor {return false}
        if _storage._isShowMsg != rhs_storage._isShowMsg {return false}
        if _storage._describe != rhs_storage._describe {return false}
        if _storage._displayText != rhs_storage._displayText {return false}
        if _storage._foldType != rhs_storage._foldType {return false}
        if _storage._anchorFoldType != rhs_storage._anchorFoldType {return false}
        if _storage._priorityScore != rhs_storage._priorityScore {return false}
        if _storage._logID != rhs_storage._logID {return false}
        if _storage._msgProcessFilterK != rhs_storage._msgProcessFilterK {return false}
        if _storage._msgProcessFilterV != rhs_storage._msgProcessFilterV {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._room != rhs_storage._room {return false}
        if _storage._anchorFoldTypeV2 != rhs_storage._anchorFoldTypeV2 {return false}
        if _storage._processAtSeiTimeMs != rhs_storage._processAtSeiTimeMs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Text"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "defaultPattern"),
    3: .same(proto: "defaultFormat"),
    4: .same(proto: "pieces"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.defaultPattern) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._defaultFormat) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.pieces) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.defaultPattern.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultPattern, fieldNumber: 2)
    }
    try { if let v = self._defaultFormat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.pieces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pieces, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Text, rhs: Text) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.defaultPattern != rhs.defaultPattern {return false}
    if lhs._defaultFormat != rhs._defaultFormat {return false}
    if lhs.pieces != rhs.pieces {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Room: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Room"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "idStr"),
    3: .same(proto: "status"),
    4: .same(proto: "ownerUserId"),
    5: .same(proto: "title"),
    6: .same(proto: "userCount"),
    7: .same(proto: "createTime"),
    8: .same(proto: "linkmicLayout"),
    9: .same(proto: "finishTime"),
    10: .same(proto: "extra"),
    11: .same(proto: "dynamicCoverUri"),
    12: .same(proto: "dynamicCoverDict"),
    13: .same(proto: "lastPingTime"),
    14: .same(proto: "liveId"),
    15: .same(proto: "streamProvider"),
    16: .same(proto: "osType"),
    17: .same(proto: "clientVersion"),
    18: .same(proto: "withLinkmic"),
    19: .same(proto: "enableRoomPerspective"),
    20: .same(proto: "cover"),
    21: .same(proto: "dynamicCover"),
    22: .same(proto: "dynamicCoverLow"),
    23: .same(proto: "shareUrl"),
    24: .same(proto: "anchorShareText"),
    25: .same(proto: "userShareText"),
    26: .same(proto: "streamId"),
    27: .same(proto: "streamIdStr"),
    28: .same(proto: "streamUrl"),
    29: .same(proto: "mosaicStatus"),
    30: .same(proto: "mosaicTip"),
    31: .same(proto: "cellStyle"),
    32: .same(proto: "linkMic"),
    33: .same(proto: "luckymoneyNum"),
    34: .same(proto: "decoList"),
    35: .same(proto: "topFans"),
    36: .same(proto: "stats"),
    37: .same(proto: "sunDailyIconContent"),
    38: .same(proto: "distance"),
    39: .same(proto: "distanceCity"),
    40: .same(proto: "location"),
    41: .same(proto: "realDistance"),
    42: .same(proto: "feedRoomLabel"),
    43: .same(proto: "commonLabelList"),
    44: .same(proto: "livingRoomAttrs"),
    45: .same(proto: "adminUserIds"),
    46: .same(proto: "owner"),
    47: .same(proto: "privateInfo"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _idStr: String = String()
    var _status: Int64 = 0
    var _ownerUserID: Int64 = 0
    var _title: String = String()
    var _userCount: Int64 = 0
    var _createTime: Int64 = 0
    var _linkmicLayout: Int64 = 0
    var _finishTime: Int64 = 0
    var _extra: RoomExtra? = nil
    var _dynamicCoverUri: String = String()
    var _dynamicCoverDict: Dictionary<Int64,String> = [:]
    var _lastPingTime: Int64 = 0
    var _liveID: Int64 = 0
    var _streamProvider: Int64 = 0
    var _osType: Int64 = 0
    var _clientVersion: Int64 = 0
    var _withLinkmic: Bool = false
    var _enableRoomPerspective: Bool = false
    var _cover: Image? = nil
    var _dynamicCover: Image? = nil
    var _dynamicCoverLow: Image? = nil
    var _shareURL: String = String()
    var _anchorShareText: String = String()
    var _userShareText: String = String()
    var _streamID: Int64 = 0
    var _streamIDStr: String = String()
    var _streamURL: StreamUrl? = nil
    var _mosaicStatus: Int64 = 0
    var _mosaicTip: String = String()
    var _cellStyle: Int64 = 0
    var _linkMic: LinkMic? = nil
    var _luckymoneyNum: Int64 = 0
    var _decoList: [Decoration] = []
    var _topFans: [TopFan] = []
    var _stats: RoomStats? = nil
    var _sunDailyIconContent: String = String()
    var _distance: String = String()
    var _distanceCity: String = String()
    var _location: String = String()
    var _realDistance: String = String()
    var _feedRoomLabel: Image? = nil
    var _commonLabelList: String = String()
    var _livingRoomAttrs: RoomUserAttr? = nil
    var _adminUserIds: [Int64] = []
    var _owner: User? = nil
    var _privateInfo: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _idStr = source._idStr
      _status = source._status
      _ownerUserID = source._ownerUserID
      _title = source._title
      _userCount = source._userCount
      _createTime = source._createTime
      _linkmicLayout = source._linkmicLayout
      _finishTime = source._finishTime
      _extra = source._extra
      _dynamicCoverUri = source._dynamicCoverUri
      _dynamicCoverDict = source._dynamicCoverDict
      _lastPingTime = source._lastPingTime
      _liveID = source._liveID
      _streamProvider = source._streamProvider
      _osType = source._osType
      _clientVersion = source._clientVersion
      _withLinkmic = source._withLinkmic
      _enableRoomPerspective = source._enableRoomPerspective
      _cover = source._cover
      _dynamicCover = source._dynamicCover
      _dynamicCoverLow = source._dynamicCoverLow
      _shareURL = source._shareURL
      _anchorShareText = source._anchorShareText
      _userShareText = source._userShareText
      _streamID = source._streamID
      _streamIDStr = source._streamIDStr
      _streamURL = source._streamURL
      _mosaicStatus = source._mosaicStatus
      _mosaicTip = source._mosaicTip
      _cellStyle = source._cellStyle
      _linkMic = source._linkMic
      _luckymoneyNum = source._luckymoneyNum
      _decoList = source._decoList
      _topFans = source._topFans
      _stats = source._stats
      _sunDailyIconContent = source._sunDailyIconContent
      _distance = source._distance
      _distanceCity = source._distanceCity
      _location = source._location
      _realDistance = source._realDistance
      _feedRoomLabel = source._feedRoomLabel
      _commonLabelList = source._commonLabelList
      _livingRoomAttrs = source._livingRoomAttrs
      _adminUserIds = source._adminUserIds
      _owner = source._owner
      _privateInfo = source._privateInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._idStr) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._status) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._ownerUserID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._userCount) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._createTime) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._linkmicLayout) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._finishTime) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._extra) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._dynamicCoverUri) }()
        case 12: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: &_storage._dynamicCoverDict) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._lastPingTime) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._liveID) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._streamProvider) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._osType) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._clientVersion) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._withLinkmic) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._enableRoomPerspective) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._cover) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._dynamicCover) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._dynamicCoverLow) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._shareURL) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._anchorShareText) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._userShareText) }()
        case 26: try { try decoder.decodeSingularInt64Field(value: &_storage._streamID) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._streamIDStr) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._streamURL) }()
        case 29: try { try decoder.decodeSingularInt64Field(value: &_storage._mosaicStatus) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._mosaicTip) }()
        case 31: try { try decoder.decodeSingularInt64Field(value: &_storage._cellStyle) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._linkMic) }()
        case 33: try { try decoder.decodeSingularInt64Field(value: &_storage._luckymoneyNum) }()
        case 34: try { try decoder.decodeRepeatedMessageField(value: &_storage._decoList) }()
        case 35: try { try decoder.decodeRepeatedMessageField(value: &_storage._topFans) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._stats) }()
        case 37: try { try decoder.decodeSingularStringField(value: &_storage._sunDailyIconContent) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._distance) }()
        case 39: try { try decoder.decodeSingularStringField(value: &_storage._distanceCity) }()
        case 40: try { try decoder.decodeSingularStringField(value: &_storage._location) }()
        case 41: try { try decoder.decodeSingularStringField(value: &_storage._realDistance) }()
        case 42: try { try decoder.decodeSingularMessageField(value: &_storage._feedRoomLabel) }()
        case 43: try { try decoder.decodeSingularStringField(value: &_storage._commonLabelList) }()
        case 44: try { try decoder.decodeSingularMessageField(value: &_storage._livingRoomAttrs) }()
        case 45: try { try decoder.decodeRepeatedInt64Field(value: &_storage._adminUserIds) }()
        case 46: try { try decoder.decodeSingularMessageField(value: &_storage._owner) }()
        case 47: try { try decoder.decodeSingularStringField(value: &_storage._privateInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._idStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._idStr, fieldNumber: 2)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt64Field(value: _storage._status, fieldNumber: 3)
      }
      if _storage._ownerUserID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ownerUserID, fieldNumber: 4)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 5)
      }
      if _storage._userCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._userCount, fieldNumber: 6)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 7)
      }
      if _storage._linkmicLayout != 0 {
        try visitor.visitSingularInt64Field(value: _storage._linkmicLayout, fieldNumber: 8)
      }
      if _storage._finishTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._finishTime, fieldNumber: 9)
      }
      try { if let v = _storage._extra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._dynamicCoverUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dynamicCoverUri, fieldNumber: 11)
      }
      if !_storage._dynamicCoverDict.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: _storage._dynamicCoverDict, fieldNumber: 12)
      }
      if _storage._lastPingTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastPingTime, fieldNumber: 13)
      }
      if _storage._liveID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._liveID, fieldNumber: 14)
      }
      if _storage._streamProvider != 0 {
        try visitor.visitSingularInt64Field(value: _storage._streamProvider, fieldNumber: 15)
      }
      if _storage._osType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._osType, fieldNumber: 16)
      }
      if _storage._clientVersion != 0 {
        try visitor.visitSingularInt64Field(value: _storage._clientVersion, fieldNumber: 17)
      }
      if _storage._withLinkmic != false {
        try visitor.visitSingularBoolField(value: _storage._withLinkmic, fieldNumber: 18)
      }
      if _storage._enableRoomPerspective != false {
        try visitor.visitSingularBoolField(value: _storage._enableRoomPerspective, fieldNumber: 19)
      }
      try { if let v = _storage._cover {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._dynamicCover {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._dynamicCoverLow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      if !_storage._shareURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shareURL, fieldNumber: 23)
      }
      if !_storage._anchorShareText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._anchorShareText, fieldNumber: 24)
      }
      if !_storage._userShareText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userShareText, fieldNumber: 25)
      }
      if _storage._streamID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._streamID, fieldNumber: 26)
      }
      if !_storage._streamIDStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streamIDStr, fieldNumber: 27)
      }
      try { if let v = _storage._streamURL {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if _storage._mosaicStatus != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mosaicStatus, fieldNumber: 29)
      }
      if !_storage._mosaicTip.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mosaicTip, fieldNumber: 30)
      }
      if _storage._cellStyle != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cellStyle, fieldNumber: 31)
      }
      try { if let v = _storage._linkMic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      } }()
      if _storage._luckymoneyNum != 0 {
        try visitor.visitSingularInt64Field(value: _storage._luckymoneyNum, fieldNumber: 33)
      }
      if !_storage._decoList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._decoList, fieldNumber: 34)
      }
      if !_storage._topFans.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._topFans, fieldNumber: 35)
      }
      try { if let v = _storage._stats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      } }()
      if !_storage._sunDailyIconContent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sunDailyIconContent, fieldNumber: 37)
      }
      if !_storage._distance.isEmpty {
        try visitor.visitSingularStringField(value: _storage._distance, fieldNumber: 38)
      }
      if !_storage._distanceCity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._distanceCity, fieldNumber: 39)
      }
      if !_storage._location.isEmpty {
        try visitor.visitSingularStringField(value: _storage._location, fieldNumber: 40)
      }
      if !_storage._realDistance.isEmpty {
        try visitor.visitSingularStringField(value: _storage._realDistance, fieldNumber: 41)
      }
      try { if let v = _storage._feedRoomLabel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      } }()
      if !_storage._commonLabelList.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commonLabelList, fieldNumber: 43)
      }
      try { if let v = _storage._livingRoomAttrs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      } }()
      if !_storage._adminUserIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._adminUserIds, fieldNumber: 45)
      }
      try { if let v = _storage._owner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
      } }()
      if !_storage._privateInfo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._privateInfo, fieldNumber: 47)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Room, rhs: Room) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._idStr != rhs_storage._idStr {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._ownerUserID != rhs_storage._ownerUserID {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._userCount != rhs_storage._userCount {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._linkmicLayout != rhs_storage._linkmicLayout {return false}
        if _storage._finishTime != rhs_storage._finishTime {return false}
        if _storage._extra != rhs_storage._extra {return false}
        if _storage._dynamicCoverUri != rhs_storage._dynamicCoverUri {return false}
        if _storage._dynamicCoverDict != rhs_storage._dynamicCoverDict {return false}
        if _storage._lastPingTime != rhs_storage._lastPingTime {return false}
        if _storage._liveID != rhs_storage._liveID {return false}
        if _storage._streamProvider != rhs_storage._streamProvider {return false}
        if _storage._osType != rhs_storage._osType {return false}
        if _storage._clientVersion != rhs_storage._clientVersion {return false}
        if _storage._withLinkmic != rhs_storage._withLinkmic {return false}
        if _storage._enableRoomPerspective != rhs_storage._enableRoomPerspective {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._dynamicCover != rhs_storage._dynamicCover {return false}
        if _storage._dynamicCoverLow != rhs_storage._dynamicCoverLow {return false}
        if _storage._shareURL != rhs_storage._shareURL {return false}
        if _storage._anchorShareText != rhs_storage._anchorShareText {return false}
        if _storage._userShareText != rhs_storage._userShareText {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        if _storage._streamIDStr != rhs_storage._streamIDStr {return false}
        if _storage._streamURL != rhs_storage._streamURL {return false}
        if _storage._mosaicStatus != rhs_storage._mosaicStatus {return false}
        if _storage._mosaicTip != rhs_storage._mosaicTip {return false}
        if _storage._cellStyle != rhs_storage._cellStyle {return false}
        if _storage._linkMic != rhs_storage._linkMic {return false}
        if _storage._luckymoneyNum != rhs_storage._luckymoneyNum {return false}
        if _storage._decoList != rhs_storage._decoList {return false}
        if _storage._topFans != rhs_storage._topFans {return false}
        if _storage._stats != rhs_storage._stats {return false}
        if _storage._sunDailyIconContent != rhs_storage._sunDailyIconContent {return false}
        if _storage._distance != rhs_storage._distance {return false}
        if _storage._distanceCity != rhs_storage._distanceCity {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._realDistance != rhs_storage._realDistance {return false}
        if _storage._feedRoomLabel != rhs_storage._feedRoomLabel {return false}
        if _storage._commonLabelList != rhs_storage._commonLabelList {return false}
        if _storage._livingRoomAttrs != rhs_storage._livingRoomAttrs {return false}
        if _storage._adminUserIds != rhs_storage._adminUserIds {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._privateInfo != rhs_storage._privateInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomExtra: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RoomExtra"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomExtra, rhs: RoomExtra) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RoomStats"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomStats, rhs: RoomStats) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RoomUserAttr: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RoomUserAttr"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RoomUserAttr, rhs: RoomUserAttr) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StreamUrl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StreamUrl"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StreamUrl, rhs: StreamUrl) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LinkMic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LinkMic"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LinkMic, rhs: LinkMic) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Decoration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Decoration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Decoration, rhs: Decoration) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TopFan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TopFan"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TopFan, rhs: TopFan) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "shortId"),
    3: .same(proto: "nickname"),
    4: .same(proto: "gender"),
    5: .same(proto: "signature"),
    6: .same(proto: "level"),
    7: .same(proto: "birthday"),
    8: .same(proto: "telephone"),
    9: .same(proto: "avatarThumb"),
    10: .same(proto: "avatarMedium"),
    11: .same(proto: "avatarLarge"),
    12: .same(proto: "verified"),
    13: .same(proto: "experience"),
    14: .same(proto: "city"),
    15: .same(proto: "status"),
    16: .same(proto: "createTime"),
    17: .same(proto: "modifyTime"),
    18: .same(proto: "secret"),
    19: .same(proto: "shareQrcodeUri"),
    20: .same(proto: "incomeSharePercent"),
    21: .same(proto: "badgeImageList"),
    22: .same(proto: "followInfo"),
    23: .same(proto: "payGrade"),
    24: .same(proto: "fansClub"),
    25: .same(proto: "border"),
    26: .same(proto: "specialId"),
    27: .same(proto: "avatarBorder"),
    28: .same(proto: "medal"),
    29: .same(proto: "realTimeIcons"),
    30: .same(proto: "newRealTimeIcons"),
    31: .same(proto: "topVipNo"),
    32: .same(proto: "userAttr"),
    33: .same(proto: "ownRoom"),
    34: .same(proto: "payScore"),
    35: .same(proto: "ticketCount"),
    36: .same(proto: "anchorInfo"),
    37: .same(proto: "linkMicStats"),
    38: .same(proto: "displayId"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _shortID: Int64 = 0
    var _nickname: String = String()
    var _gender: Int32 = 0
    var _signature: String = String()
    var _level: Int32 = 0
    var _birthday: Int64 = 0
    var _telephone: String = String()
    var _avatarThumb: Image? = nil
    var _avatarMedium: Image? = nil
    var _avatarLarge: Image? = nil
    var _verified: Bool = false
    var _experience: Int32 = 0
    var _city: String = String()
    var _status: Int32 = 0
    var _createTime: Int64 = 0
    var _modifyTime: Int64 = 0
    var _secret: Int32 = 0
    var _shareQrcodeUri: String = String()
    var _incomeSharePercent: Int32 = 0
    var _badgeImageList: Image? = nil
    var _followInfo: User.FollowInfo? = nil
    var _payGrade: User.PayGrade? = nil
    var _fansClub: User.FansClub? = nil
    var _border: User.Border? = nil
    var _specialID: String = String()
    var _avatarBorder: Image? = nil
    var _medal: Image? = nil
    var _realTimeIcons: [Image] = []
    var _newRealTimeIcons: [Image] = []
    var _topVipNo: Int64 = 0
    var _userAttr: User.UserAttr? = nil
    var _ownRoom: User.OwnRoom? = nil
    var _payScore: Int64 = 0
    var _ticketCount: Int64 = 0
    var _anchorInfo: User.AnchorInfo? = nil
    var _linkMicStats: Int32 = 0
    var _displayID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _shortID = source._shortID
      _nickname = source._nickname
      _gender = source._gender
      _signature = source._signature
      _level = source._level
      _birthday = source._birthday
      _telephone = source._telephone
      _avatarThumb = source._avatarThumb
      _avatarMedium = source._avatarMedium
      _avatarLarge = source._avatarLarge
      _verified = source._verified
      _experience = source._experience
      _city = source._city
      _status = source._status
      _createTime = source._createTime
      _modifyTime = source._modifyTime
      _secret = source._secret
      _shareQrcodeUri = source._shareQrcodeUri
      _incomeSharePercent = source._incomeSharePercent
      _badgeImageList = source._badgeImageList
      _followInfo = source._followInfo
      _payGrade = source._payGrade
      _fansClub = source._fansClub
      _border = source._border
      _specialID = source._specialID
      _avatarBorder = source._avatarBorder
      _medal = source._medal
      _realTimeIcons = source._realTimeIcons
      _newRealTimeIcons = source._newRealTimeIcons
      _topVipNo = source._topVipNo
      _userAttr = source._userAttr
      _ownRoom = source._ownRoom
      _payScore = source._payScore
      _ticketCount = source._ticketCount
      _anchorInfo = source._anchorInfo
      _linkMicStats = source._linkMicStats
      _displayID = source._displayID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._shortID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._gender) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._signature) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._level) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._birthday) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._telephone) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._avatarThumb) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._avatarMedium) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._avatarLarge) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._verified) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._experience) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._city) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._status) }()
        case 16: try { try decoder.decodeSingularInt64Field(value: &_storage._createTime) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._modifyTime) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._secret) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._shareQrcodeUri) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._incomeSharePercent) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._badgeImageList) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._followInfo) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._payGrade) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._fansClub) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._border) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._specialID) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._avatarBorder) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._medal) }()
        case 29: try { try decoder.decodeRepeatedMessageField(value: &_storage._realTimeIcons) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._newRealTimeIcons) }()
        case 31: try { try decoder.decodeSingularInt64Field(value: &_storage._topVipNo) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._userAttr) }()
        case 33: try { try decoder.decodeSingularMessageField(value: &_storage._ownRoom) }()
        case 34: try { try decoder.decodeSingularInt64Field(value: &_storage._payScore) }()
        case 35: try { try decoder.decodeSingularInt64Field(value: &_storage._ticketCount) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._anchorInfo) }()
        case 37: try { try decoder.decodeSingularInt32Field(value: &_storage._linkMicStats) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._displayID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._shortID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._shortID, fieldNumber: 2)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 3)
      }
      if _storage._gender != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gender, fieldNumber: 4)
      }
      if !_storage._signature.isEmpty {
        try visitor.visitSingularStringField(value: _storage._signature, fieldNumber: 5)
      }
      if _storage._level != 0 {
        try visitor.visitSingularInt32Field(value: _storage._level, fieldNumber: 6)
      }
      if _storage._birthday != 0 {
        try visitor.visitSingularInt64Field(value: _storage._birthday, fieldNumber: 7)
      }
      if !_storage._telephone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._telephone, fieldNumber: 8)
      }
      try { if let v = _storage._avatarThumb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._avatarMedium {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._avatarLarge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      if _storage._verified != false {
        try visitor.visitSingularBoolField(value: _storage._verified, fieldNumber: 12)
      }
      if _storage._experience != 0 {
        try visitor.visitSingularInt32Field(value: _storage._experience, fieldNumber: 13)
      }
      if !_storage._city.isEmpty {
        try visitor.visitSingularStringField(value: _storage._city, fieldNumber: 14)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 15)
      }
      if _storage._createTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createTime, fieldNumber: 16)
      }
      if _storage._modifyTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._modifyTime, fieldNumber: 17)
      }
      if _storage._secret != 0 {
        try visitor.visitSingularInt32Field(value: _storage._secret, fieldNumber: 18)
      }
      if !_storage._shareQrcodeUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._shareQrcodeUri, fieldNumber: 19)
      }
      if _storage._incomeSharePercent != 0 {
        try visitor.visitSingularInt32Field(value: _storage._incomeSharePercent, fieldNumber: 20)
      }
      try { if let v = _storage._badgeImageList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._followInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._payGrade {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._fansClub {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._border {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      if !_storage._specialID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._specialID, fieldNumber: 26)
      }
      try { if let v = _storage._avatarBorder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._medal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      if !_storage._realTimeIcons.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._realTimeIcons, fieldNumber: 29)
      }
      if !_storage._newRealTimeIcons.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._newRealTimeIcons, fieldNumber: 30)
      }
      if _storage._topVipNo != 0 {
        try visitor.visitSingularInt64Field(value: _storage._topVipNo, fieldNumber: 31)
      }
      try { if let v = _storage._userAttr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._ownRoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      } }()
      if _storage._payScore != 0 {
        try visitor.visitSingularInt64Field(value: _storage._payScore, fieldNumber: 34)
      }
      if _storage._ticketCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ticketCount, fieldNumber: 35)
      }
      try { if let v = _storage._anchorInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      } }()
      if _storage._linkMicStats != 0 {
        try visitor.visitSingularInt32Field(value: _storage._linkMicStats, fieldNumber: 37)
      }
      if !_storage._displayID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayID, fieldNumber: 38)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User, rhs: User) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._shortID != rhs_storage._shortID {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._signature != rhs_storage._signature {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._birthday != rhs_storage._birthday {return false}
        if _storage._telephone != rhs_storage._telephone {return false}
        if _storage._avatarThumb != rhs_storage._avatarThumb {return false}
        if _storage._avatarMedium != rhs_storage._avatarMedium {return false}
        if _storage._avatarLarge != rhs_storage._avatarLarge {return false}
        if _storage._verified != rhs_storage._verified {return false}
        if _storage._experience != rhs_storage._experience {return false}
        if _storage._city != rhs_storage._city {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        if _storage._modifyTime != rhs_storage._modifyTime {return false}
        if _storage._secret != rhs_storage._secret {return false}
        if _storage._shareQrcodeUri != rhs_storage._shareQrcodeUri {return false}
        if _storage._incomeSharePercent != rhs_storage._incomeSharePercent {return false}
        if _storage._badgeImageList != rhs_storage._badgeImageList {return false}
        if _storage._followInfo != rhs_storage._followInfo {return false}
        if _storage._payGrade != rhs_storage._payGrade {return false}
        if _storage._fansClub != rhs_storage._fansClub {return false}
        if _storage._border != rhs_storage._border {return false}
        if _storage._specialID != rhs_storage._specialID {return false}
        if _storage._avatarBorder != rhs_storage._avatarBorder {return false}
        if _storage._medal != rhs_storage._medal {return false}
        if _storage._realTimeIcons != rhs_storage._realTimeIcons {return false}
        if _storage._newRealTimeIcons != rhs_storage._newRealTimeIcons {return false}
        if _storage._topVipNo != rhs_storage._topVipNo {return false}
        if _storage._userAttr != rhs_storage._userAttr {return false}
        if _storage._ownRoom != rhs_storage._ownRoom {return false}
        if _storage._payScore != rhs_storage._payScore {return false}
        if _storage._ticketCount != rhs_storage._ticketCount {return false}
        if _storage._anchorInfo != rhs_storage._anchorInfo {return false}
        if _storage._linkMicStats != rhs_storage._linkMicStats {return false}
        if _storage._displayID != rhs_storage._displayID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.UserAttr: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".UserAttr"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.UserAttr, rhs: User.UserAttr) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.OwnRoom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".OwnRoom"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.OwnRoom, rhs: User.OwnRoom) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.AnchorInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".AnchorInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.AnchorInfo, rhs: User.AnchorInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.FollowInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".FollowInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "followingCount"),
    2: .same(proto: "followerCount"),
    3: .same(proto: "followStatus"),
    4: .same(proto: "pushStatus"),
    5: .same(proto: "remarkName"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.followingCount) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.followerCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.followStatus) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.pushStatus) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.remarkName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.followingCount != 0 {
      try visitor.visitSingularInt64Field(value: self.followingCount, fieldNumber: 1)
    }
    if self.followerCount != 0 {
      try visitor.visitSingularInt64Field(value: self.followerCount, fieldNumber: 2)
    }
    if self.followStatus != 0 {
      try visitor.visitSingularInt64Field(value: self.followStatus, fieldNumber: 3)
    }
    if self.pushStatus != 0 {
      try visitor.visitSingularInt64Field(value: self.pushStatus, fieldNumber: 4)
    }
    if !self.remarkName.isEmpty {
      try visitor.visitSingularStringField(value: self.remarkName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.FollowInfo, rhs: User.FollowInfo) -> Bool {
    if lhs.followingCount != rhs.followingCount {return false}
    if lhs.followerCount != rhs.followerCount {return false}
    if lhs.followStatus != rhs.followStatus {return false}
    if lhs.pushStatus != rhs.pushStatus {return false}
    if lhs.remarkName != rhs.remarkName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.FansClub: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".FansClub"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "preferData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,User.FansClub.FansClubData>.self, value: &self.preferData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.preferData.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,User.FansClub.FansClubData>.self, value: self.preferData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.FansClub, rhs: User.FansClub) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.preferData != rhs.preferData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.FansClub.FansClubData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.FansClub.protoMessageName + ".FansClubData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clubName"),
    2: .same(proto: "level"),
    3: .same(proto: "userFansClubStatus"),
    4: .same(proto: "badge"),
    5: .same(proto: "availableGiftIds"),
    6: .same(proto: "anchorId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clubName) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.level) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.userFansClubStatus) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._badge) }()
      case 5: try { try decoder.decodeRepeatedInt64Field(value: &self.availableGiftIds) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.anchorID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.clubName.isEmpty {
      try visitor.visitSingularStringField(value: self.clubName, fieldNumber: 1)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 2)
    }
    if self.userFansClubStatus != 0 {
      try visitor.visitSingularInt32Field(value: self.userFansClubStatus, fieldNumber: 3)
    }
    try { if let v = self._badge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.availableGiftIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.availableGiftIds, fieldNumber: 5)
    }
    if self.anchorID != 0 {
      try visitor.visitSingularInt64Field(value: self.anchorID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.FansClub.FansClubData, rhs: User.FansClub.FansClubData) -> Bool {
    if lhs.clubName != rhs.clubName {return false}
    if lhs.level != rhs.level {return false}
    if lhs.userFansClubStatus != rhs.userFansClubStatus {return false}
    if lhs._badge != rhs._badge {return false}
    if lhs.availableGiftIds != rhs.availableGiftIds {return false}
    if lhs.anchorID != rhs.anchorID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.FansClub.FansClubData.UserBadge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.FansClub.FansClubData.protoMessageName + ".UserBadge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icons"),
    2: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Image>.self, value: &self.icons) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.icons.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Image>.self, value: self.icons, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.FansClub.FansClubData.UserBadge, rhs: User.FansClub.FansClubData.UserBadge) -> Bool {
    if lhs.icons != rhs.icons {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.Border: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".Border"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.Border, rhs: User.Border) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.GradeBuffInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".GradeBuffInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buffLevel"),
    2: .same(proto: "status"),
    3: .same(proto: "endTime"),
    4: .same(proto: "statsInfo"),
    5: .same(proto: "buffBadge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.buffLevel) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.endTime) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt64>.self, value: &self.statsInfo) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._buffBadge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.buffLevel != 0 {
      try visitor.visitSingularInt64Field(value: self.buffLevel, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt64Field(value: self.endTime, fieldNumber: 3)
    }
    if !self.statsInfo.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufInt64>.self, value: self.statsInfo, fieldNumber: 4)
    }
    try { if let v = self._buffBadge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.GradeBuffInfo, rhs: User.GradeBuffInfo) -> Bool {
    if lhs.buffLevel != rhs.buffLevel {return false}
    if lhs.status != rhs.status {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.statsInfo != rhs.statsInfo {return false}
    if lhs._buffBadge != rhs._buffBadge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.PayGrade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.protoMessageName + ".PayGrade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalDiamondCount"),
    2: .same(proto: "diamondIcon"),
    3: .same(proto: "name"),
    4: .same(proto: "icon"),
    5: .same(proto: "nextName"),
    6: .same(proto: "level"),
    7: .same(proto: "nextIcon"),
    8: .same(proto: "nextDiamond"),
    9: .same(proto: "nowDiamond"),
    10: .same(proto: "thisGradeMinDiamond"),
    11: .same(proto: "thisGradeMaxDiamond"),
    12: .same(proto: "payDiamondBak"),
    13: .same(proto: "gradeDescribe"),
    14: .same(proto: "gradeIconList"),
    15: .same(proto: "screenChatType"),
    16: .same(proto: "imIcon"),
    17: .same(proto: "imIconWithLevel"),
    18: .same(proto: "liveIcon"),
    19: .same(proto: "newImIconWithLevel"),
    20: .same(proto: "newLiveIcon"),
    21: .same(proto: "upgradeNeedConsume"),
    22: .same(proto: "nextPrivileges"),
    23: .same(proto: "background"),
    24: .same(proto: "backgroundBack"),
    25: .same(proto: "score"),
    26: .same(proto: "buffInfo"),
    1001: .same(proto: "gradeBanner"),
    1002: .same(proto: "profileDialogBg"),
    1003: .same(proto: "profileDialogBgBack"),
  ]

  fileprivate class _StorageClass {
    var _totalDiamondCount: Int64 = 0
    var _diamondIcon: Image? = nil
    var _name: String = String()
    var _icon: Image? = nil
    var _nextName: String = String()
    var _level: Int64 = 0
    var _nextIcon: Image? = nil
    var _nextDiamond: Int64 = 0
    var _nowDiamond: Int64 = 0
    var _thisGradeMinDiamond: Int64 = 0
    var _thisGradeMaxDiamond: Int64 = 0
    var _payDiamondBak: Int64 = 0
    var _gradeDescribe: String = String()
    var _gradeIconList: [User.PayGrade.GradeIcon] = []
    var _screenChatType: Int64 = 0
    var _imIcon: Image? = nil
    var _imIconWithLevel: Image? = nil
    var _liveIcon: Image? = nil
    var _newImIconWithLevel: Image? = nil
    var _newLiveIcon: Image? = nil
    var _upgradeNeedConsume: Int64 = 0
    var _nextPrivileges: String = String()
    var _background: Image? = nil
    var _backgroundBack: Image? = nil
    var _score: Int64 = 0
    var _buffInfo: User.GradeBuffInfo? = nil
    var _gradeBanner: String = String()
    var _profileDialogBg: Image? = nil
    var _profileDialogBgBack: Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _totalDiamondCount = source._totalDiamondCount
      _diamondIcon = source._diamondIcon
      _name = source._name
      _icon = source._icon
      _nextName = source._nextName
      _level = source._level
      _nextIcon = source._nextIcon
      _nextDiamond = source._nextDiamond
      _nowDiamond = source._nowDiamond
      _thisGradeMinDiamond = source._thisGradeMinDiamond
      _thisGradeMaxDiamond = source._thisGradeMaxDiamond
      _payDiamondBak = source._payDiamondBak
      _gradeDescribe = source._gradeDescribe
      _gradeIconList = source._gradeIconList
      _screenChatType = source._screenChatType
      _imIcon = source._imIcon
      _imIconWithLevel = source._imIconWithLevel
      _liveIcon = source._liveIcon
      _newImIconWithLevel = source._newImIconWithLevel
      _newLiveIcon = source._newLiveIcon
      _upgradeNeedConsume = source._upgradeNeedConsume
      _nextPrivileges = source._nextPrivileges
      _background = source._background
      _backgroundBack = source._backgroundBack
      _score = source._score
      _buffInfo = source._buffInfo
      _gradeBanner = source._gradeBanner
      _profileDialogBg = source._profileDialogBg
      _profileDialogBgBack = source._profileDialogBgBack
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._totalDiamondCount) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._diamondIcon) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._icon) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._nextName) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._level) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._nextIcon) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._nextDiamond) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._nowDiamond) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._thisGradeMinDiamond) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._thisGradeMaxDiamond) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._payDiamondBak) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._gradeDescribe) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._gradeIconList) }()
        case 15: try { try decoder.decodeSingularInt64Field(value: &_storage._screenChatType) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._imIcon) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._imIconWithLevel) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._liveIcon) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._newImIconWithLevel) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._newLiveIcon) }()
        case 21: try { try decoder.decodeSingularInt64Field(value: &_storage._upgradeNeedConsume) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._nextPrivileges) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._background) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundBack) }()
        case 25: try { try decoder.decodeSingularInt64Field(value: &_storage._score) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._buffInfo) }()
        case 1001: try { try decoder.decodeSingularStringField(value: &_storage._gradeBanner) }()
        case 1002: try { try decoder.decodeSingularMessageField(value: &_storage._profileDialogBg) }()
        case 1003: try { try decoder.decodeSingularMessageField(value: &_storage._profileDialogBgBack) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._totalDiamondCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalDiamondCount, fieldNumber: 1)
      }
      try { if let v = _storage._diamondIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      try { if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._nextName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nextName, fieldNumber: 5)
      }
      if _storage._level != 0 {
        try visitor.visitSingularInt64Field(value: _storage._level, fieldNumber: 6)
      }
      try { if let v = _storage._nextIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._nextDiamond != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nextDiamond, fieldNumber: 8)
      }
      if _storage._nowDiamond != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nowDiamond, fieldNumber: 9)
      }
      if _storage._thisGradeMinDiamond != 0 {
        try visitor.visitSingularInt64Field(value: _storage._thisGradeMinDiamond, fieldNumber: 10)
      }
      if _storage._thisGradeMaxDiamond != 0 {
        try visitor.visitSingularInt64Field(value: _storage._thisGradeMaxDiamond, fieldNumber: 11)
      }
      if _storage._payDiamondBak != 0 {
        try visitor.visitSingularInt64Field(value: _storage._payDiamondBak, fieldNumber: 12)
      }
      if !_storage._gradeDescribe.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gradeDescribe, fieldNumber: 13)
      }
      if !_storage._gradeIconList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gradeIconList, fieldNumber: 14)
      }
      if _storage._screenChatType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._screenChatType, fieldNumber: 15)
      }
      try { if let v = _storage._imIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._imIconWithLevel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._liveIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._newImIconWithLevel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._newLiveIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if _storage._upgradeNeedConsume != 0 {
        try visitor.visitSingularInt64Field(value: _storage._upgradeNeedConsume, fieldNumber: 21)
      }
      if !_storage._nextPrivileges.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nextPrivileges, fieldNumber: 22)
      }
      try { if let v = _storage._background {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._backgroundBack {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      if _storage._score != 0 {
        try visitor.visitSingularInt64Field(value: _storage._score, fieldNumber: 25)
      }
      try { if let v = _storage._buffInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      if !_storage._gradeBanner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gradeBanner, fieldNumber: 1001)
      }
      try { if let v = _storage._profileDialogBg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
      } }()
      try { if let v = _storage._profileDialogBgBack {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.PayGrade, rhs: User.PayGrade) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._totalDiamondCount != rhs_storage._totalDiamondCount {return false}
        if _storage._diamondIcon != rhs_storage._diamondIcon {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._icon != rhs_storage._icon {return false}
        if _storage._nextName != rhs_storage._nextName {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._nextIcon != rhs_storage._nextIcon {return false}
        if _storage._nextDiamond != rhs_storage._nextDiamond {return false}
        if _storage._nowDiamond != rhs_storage._nowDiamond {return false}
        if _storage._thisGradeMinDiamond != rhs_storage._thisGradeMinDiamond {return false}
        if _storage._thisGradeMaxDiamond != rhs_storage._thisGradeMaxDiamond {return false}
        if _storage._payDiamondBak != rhs_storage._payDiamondBak {return false}
        if _storage._gradeDescribe != rhs_storage._gradeDescribe {return false}
        if _storage._gradeIconList != rhs_storage._gradeIconList {return false}
        if _storage._screenChatType != rhs_storage._screenChatType {return false}
        if _storage._imIcon != rhs_storage._imIcon {return false}
        if _storage._imIconWithLevel != rhs_storage._imIconWithLevel {return false}
        if _storage._liveIcon != rhs_storage._liveIcon {return false}
        if _storage._newImIconWithLevel != rhs_storage._newImIconWithLevel {return false}
        if _storage._newLiveIcon != rhs_storage._newLiveIcon {return false}
        if _storage._upgradeNeedConsume != rhs_storage._upgradeNeedConsume {return false}
        if _storage._nextPrivileges != rhs_storage._nextPrivileges {return false}
        if _storage._background != rhs_storage._background {return false}
        if _storage._backgroundBack != rhs_storage._backgroundBack {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._buffInfo != rhs_storage._buffInfo {return false}
        if _storage._gradeBanner != rhs_storage._gradeBanner {return false}
        if _storage._profileDialogBg != rhs_storage._profileDialogBg {return false}
        if _storage._profileDialogBgBack != rhs_storage._profileDialogBgBack {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension User.PayGrade.GradeIcon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = User.PayGrade.protoMessageName + ".GradeIcon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "iconDiamond"),
    3: .same(proto: "level"),
    4: .same(proto: "levelStr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._icon) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.iconDiamond) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.level) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.levelStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._icon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.iconDiamond != 0 {
      try visitor.visitSingularInt64Field(value: self.iconDiamond, fieldNumber: 2)
    }
    if self.level != 0 {
      try visitor.visitSingularInt64Field(value: self.level, fieldNumber: 3)
    }
    if !self.levelStr.isEmpty {
      try visitor.visitSingularStringField(value: self.levelStr, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User.PayGrade.GradeIcon, rhs: User.PayGrade.GradeIcon) -> Bool {
    if lhs._icon != rhs._icon {return false}
    if lhs.iconDiamond != rhs.iconDiamond {return false}
    if lhs.level != rhs.level {return false}
    if lhs.levelStr != rhs.levelStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TextFormat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TextFormat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .same(proto: "bold"),
    3: .same(proto: "italic"),
    4: .same(proto: "weight"),
    5: .same(proto: "italicAngle"),
    6: .same(proto: "fontSize"),
    7: .same(proto: "userHeightLightColor"),
    8: .same(proto: "useRemoteClor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.bold) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.italic) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.weight) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.italicAngle) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.fontSize) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.userHeightLightColor) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.useRemoteClor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 1)
    }
    if self.bold != false {
      try visitor.visitSingularBoolField(value: self.bold, fieldNumber: 2)
    }
    if self.italic != false {
      try visitor.visitSingularBoolField(value: self.italic, fieldNumber: 3)
    }
    if self.weight != 0 {
      try visitor.visitSingularInt32Field(value: self.weight, fieldNumber: 4)
    }
    if self.italicAngle != 0 {
      try visitor.visitSingularInt32Field(value: self.italicAngle, fieldNumber: 5)
    }
    if self.fontSize != 0 {
      try visitor.visitSingularInt32Field(value: self.fontSize, fieldNumber: 6)
    }
    if self.userHeightLightColor != false {
      try visitor.visitSingularBoolField(value: self.userHeightLightColor, fieldNumber: 7)
    }
    if self.useRemoteClor != false {
      try visitor.visitSingularBoolField(value: self.useRemoteClor, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TextFormat, rhs: TextFormat) -> Bool {
    if lhs.color != rhs.color {return false}
    if lhs.bold != rhs.bold {return false}
    if lhs.italic != rhs.italic {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.italicAngle != rhs.italicAngle {return false}
    if lhs.fontSize != rhs.fontSize {return false}
    if lhs.userHeightLightColor != rhs.userHeightLightColor {return false}
    if lhs.useRemoteClor != rhs.useRemoteClor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TextPiece: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TextPiece"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "format"),
    11: .same(proto: "stringValue"),
    21: .same(proto: "userValue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._format) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.stringValue) }()
      case 21: try { try decoder.decodeSingularMessageField(value: &self._userValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._format {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.stringValue.isEmpty {
      try visitor.visitSingularStringField(value: self.stringValue, fieldNumber: 11)
    }
    try { if let v = self._userValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TextPiece, rhs: TextPiece) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._format != rhs._format {return false}
    if lhs.stringValue != rhs.stringValue {return false}
    if lhs._userValue != rhs._userValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Image"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "urlList"),
    2: .same(proto: "uri"),
    3: .same(proto: "height"),
    4: .same(proto: "width"),
    5: .same(proto: "avgColor"),
    6: .same(proto: "imageType"),
    7: .same(proto: "openWebUrl"),
    8: .same(proto: "content"),
    9: .same(proto: "isAnimated"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.urlList) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.width) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.avgColor) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.imageType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.openWebURL) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isAnimated) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.urlList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.urlList, fieldNumber: 1)
    }
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 3)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 4)
    }
    if !self.avgColor.isEmpty {
      try visitor.visitSingularStringField(value: self.avgColor, fieldNumber: 5)
    }
    if self.imageType != 0 {
      try visitor.visitSingularInt32Field(value: self.imageType, fieldNumber: 6)
    }
    if !self.openWebURL.isEmpty {
      try visitor.visitSingularStringField(value: self.openWebURL, fieldNumber: 7)
    }
    try { if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.isAnimated != false {
      try visitor.visitSingularBoolField(value: self.isAnimated, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Image, rhs: Image) -> Bool {
    if lhs.urlList != rhs.urlList {return false}
    if lhs.uri != rhs.uri {return false}
    if lhs.height != rhs.height {return false}
    if lhs.width != rhs.width {return false}
    if lhs.avgColor != rhs.avgColor {return false}
    if lhs.imageType != rhs.imageType {return false}
    if lhs.openWebURL != rhs.openWebURL {return false}
    if lhs._content != rhs._content {return false}
    if lhs.isAnimated != rhs.isAnimated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Image.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Image.protoMessageName + ".Content"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "fontColor"),
    3: .same(proto: "level"),
    4: .same(proto: "alternativeText"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fontColor) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.level) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.alternativeText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.fontColor.isEmpty {
      try visitor.visitSingularStringField(value: self.fontColor, fieldNumber: 2)
    }
    if self.level != 0 {
      try visitor.visitSingularInt64Field(value: self.level, fieldNumber: 3)
    }
    if !self.alternativeText.isEmpty {
      try visitor.visitSingularStringField(value: self.alternativeText, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Image.Content, rhs: Image.Content) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.fontColor != rhs.fontColor {return false}
    if lhs.level != rhs.level {return false}
    if lhs.alternativeText != rhs.alternativeText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TextPieceUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TextPieceUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "withColon"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.withColon) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.withColon != false {
      try visitor.visitSingularBoolField(value: self.withColon, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TextPieceUser, rhs: TextPieceUser) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.withColon != rhs.withColon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PublicAreaCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PublicAreaCommon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userLabel"),
    2: .same(proto: "userConsumeInRoom"),
    3: .same(proto: "userSendGiftCntInRoom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._userLabel) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userConsumeInRoom) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.userSendGiftCntInRoom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userLabel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.userConsumeInRoom != 0 {
      try visitor.visitSingularInt64Field(value: self.userConsumeInRoom, fieldNumber: 2)
    }
    if self.userSendGiftCntInRoom != 0 {
      try visitor.visitSingularInt64Field(value: self.userSendGiftCntInRoom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PublicAreaCommon, rhs: PublicAreaCommon) -> Bool {
    if lhs._userLabel != rhs._userLabel {return false}
    if lhs.userConsumeInRoom != rhs.userConsumeInRoom {return false}
    if lhs.userSendGiftCntInRoom != rhs.userSendGiftCntInRoom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftIMPriority: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftIMPriority"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "queueSizes"),
    2: .same(proto: "selfQueuePriority"),
    3: .same(proto: "priority"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.queueSizes) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.selfQueuePriority) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.priority) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queueSizes.isEmpty {
      try visitor.visitPackedInt64Field(value: self.queueSizes, fieldNumber: 1)
    }
    if self.selfQueuePriority != 0 {
      try visitor.visitSingularInt64Field(value: self.selfQueuePriority, fieldNumber: 2)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt64Field(value: self.priority, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftIMPriority, rhs: GiftIMPriority) -> Bool {
    if lhs.queueSizes != rhs.queueSizes {return false}
    if lhs.selfQueuePriority != rhs.selfQueuePriority {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftTrayInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftTrayInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trayDisplayText"),
    2: .same(proto: "trayBaseImg"),
    3: .same(proto: "trayHeadImg"),
    4: .same(proto: "trayRightImg"),
    5: .same(proto: "trayLevel"),
    6: .same(proto: "trayDynamicImg"),
  ]

  fileprivate class _StorageClass {
    var _trayDisplayText: Text? = nil
    var _trayBaseImg: Image? = nil
    var _trayHeadImg: Image? = nil
    var _trayRightImg: Image? = nil
    var _trayLevel: Int64 = 0
    var _trayDynamicImg: Image? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trayDisplayText = source._trayDisplayText
      _trayBaseImg = source._trayBaseImg
      _trayHeadImg = source._trayHeadImg
      _trayRightImg = source._trayRightImg
      _trayLevel = source._trayLevel
      _trayDynamicImg = source._trayDynamicImg
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._trayDisplayText) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._trayBaseImg) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._trayHeadImg) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._trayRightImg) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._trayLevel) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._trayDynamicImg) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._trayDisplayText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._trayBaseImg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._trayHeadImg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._trayRightImg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._trayLevel != 0 {
        try visitor.visitSingularInt64Field(value: _storage._trayLevel, fieldNumber: 5)
      }
      try { if let v = _storage._trayDynamicImg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftTrayInfo, rhs: GiftTrayInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trayDisplayText != rhs_storage._trayDisplayText {return false}
        if _storage._trayBaseImg != rhs_storage._trayBaseImg {return false}
        if _storage._trayHeadImg != rhs_storage._trayHeadImg {return false}
        if _storage._trayRightImg != rhs_storage._trayRightImg {return false}
        if _storage._trayLevel != rhs_storage._trayLevel {return false}
        if _storage._trayDynamicImg != rhs_storage._trayDynamicImg {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftStruct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftStruct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "image"),
    2: .same(proto: "describe"),
    3: .same(proto: "notify"),
    4: .same(proto: "duration"),
    5: .same(proto: "id"),
    6: .same(proto: "fansclubInfo"),
    7: .same(proto: "forLinkmic"),
    8: .same(proto: "doodle"),
    9: .same(proto: "forFansclub"),
    10: .same(proto: "combo"),
    11: .same(proto: "type"),
    12: .same(proto: "diamondCount"),
    13: .same(proto: "isDisplayedOnPanel"),
    14: .same(proto: "primaryEffectId"),
    15: .same(proto: "giftLabelIcon"),
    16: .same(proto: "name"),
    17: .same(proto: "region"),
    18: .same(proto: "manual"),
    19: .same(proto: "forCustom"),
    20: .same(proto: "specialEffects"),
    21: .same(proto: "icon"),
    22: .same(proto: "actionType"),
    23: .same(proto: "watermelonSeeds"),
    24: .same(proto: "goldEffect"),
    25: .same(proto: "subs"),
    26: .same(proto: "goldenBeans"),
    27: .same(proto: "honorLevel"),
    28: .same(proto: "itemType"),
    29: .same(proto: "schemeUrl"),
    30: .same(proto: "giftOperation"),
    31: .same(proto: "eventName"),
    32: .same(proto: "nobleLevel"),
    33: .same(proto: "guideUrl"),
    34: .same(proto: "punishMedicine"),
    35: .same(proto: "forPortal"),
    36: .same(proto: "businessText"),
    37: .same(proto: "cnyGift"),
    38: .same(proto: "appId"),
    39: .same(proto: "vipLevel"),
    40: .same(proto: "isGray"),
    41: .same(proto: "graySchemeUrl"),
    42: .same(proto: "giftScene"),
    43: .same(proto: "giftBanner"),
    44: .same(proto: "triggerWords"),
    45: .same(proto: "giftBuffInfos"),
    46: .same(proto: "forFirstRecharge"),
    47: .same(proto: "dynamicImgForSelected"),
    48: .same(proto: "afterSendAction"),
    49: .same(proto: "giftOfflineTime"),
    50: .same(proto: "topBarText"),
    51: .same(proto: "topRightAvatar"),
    52: .same(proto: "bannerSchemeUrl"),
    53: .same(proto: "isLocked"),
    54: .same(proto: "reqExtraType"),
    55: .same(proto: "assetIds"),
    56: .same(proto: "giftPreviewInfo"),
    57: .same(proto: "giftTip"),
    58: .same(proto: "needSweepLightCount"),
    59: .same(proto: "groupInfo"),
  ]

  fileprivate class _StorageClass {
    var _image: Image? = nil
    var _describe: String = String()
    var _notify: Bool = false
    var _duration: Int64 = 0
    var _id: Int64 = 0
    var _fansclubInfo: GiftStruct.GiftStructFansClubInfo? = nil
    var _forLinkmic: Bool = false
    var _doodle: Bool = false
    var _forFansclub: Bool = false
    var _combo: Bool = false
    var _type: Int32 = 0
    var _diamondCount: Int32 = 0
    var _isDisplayedOnPanel: Int32 = 0
    var _primaryEffectID: Int64 = 0
    var _giftLabelIcon: Image? = nil
    var _name: String = String()
    var _region: String = String()
    var _manual: String = String()
    var _forCustom: Bool = false
    var _specialEffects: Dictionary<String,Int64> = [:]
    var _icon: Image? = nil
    var _actionType: Int32 = 0
    var _watermelonSeeds: Int32 = 0
    var _goldEffect: String = String()
    var _subs: [LuckyMoneyGiftMeta] = []
    var _goldenBeans: Int64 = 0
    var _honorLevel: Int64 = 0
    var _itemType: Int32 = 0
    var _schemeURL: String = String()
    var _giftOperation: GiftPanelOperation? = nil
    var _eventName: String = String()
    var _nobleLevel: Int64 = 0
    var _guideURL: String = String()
    var _punishMedicine: Bool = false
    var _forPortal: Bool = false
    var _businessText: String = String()
    var _cnyGift: Bool = false
    var _appID: Int64 = 0
    var _vipLevel: Int64 = 0
    var _isGray: Bool = false
    var _graySchemeURL: String = String()
    var _giftScene: Int64 = 0
    var _giftBanner: GiftBanner? = nil
    var _triggerWords: [String] = []
    var _giftBuffInfos: [GiftBuffInfo] = []
    var _forFirstRecharge: Bool = false
    var _dynamicImgForSelected: Image? = nil
    var _afterSendAction: Int32 = 0
    var _giftOfflineTime: Int64 = 0
    var _topBarText: String = String()
    var _topRightAvatar: Image? = nil
    var _bannerSchemeURL: String = String()
    var _isLocked: Bool = false
    var _reqExtraType: Int64 = 0
    var _assetIds: [Int64] = []
    var _giftPreviewInfo: GiftPreviewInfo? = nil
    var _giftTip: GiftTip? = nil
    var _needSweepLightCount: Int32 = 0
    var _groupInfo: [GiftGroupInfo] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _image = source._image
      _describe = source._describe
      _notify = source._notify
      _duration = source._duration
      _id = source._id
      _fansclubInfo = source._fansclubInfo
      _forLinkmic = source._forLinkmic
      _doodle = source._doodle
      _forFansclub = source._forFansclub
      _combo = source._combo
      _type = source._type
      _diamondCount = source._diamondCount
      _isDisplayedOnPanel = source._isDisplayedOnPanel
      _primaryEffectID = source._primaryEffectID
      _giftLabelIcon = source._giftLabelIcon
      _name = source._name
      _region = source._region
      _manual = source._manual
      _forCustom = source._forCustom
      _specialEffects = source._specialEffects
      _icon = source._icon
      _actionType = source._actionType
      _watermelonSeeds = source._watermelonSeeds
      _goldEffect = source._goldEffect
      _subs = source._subs
      _goldenBeans = source._goldenBeans
      _honorLevel = source._honorLevel
      _itemType = source._itemType
      _schemeURL = source._schemeURL
      _giftOperation = source._giftOperation
      _eventName = source._eventName
      _nobleLevel = source._nobleLevel
      _guideURL = source._guideURL
      _punishMedicine = source._punishMedicine
      _forPortal = source._forPortal
      _businessText = source._businessText
      _cnyGift = source._cnyGift
      _appID = source._appID
      _vipLevel = source._vipLevel
      _isGray = source._isGray
      _graySchemeURL = source._graySchemeURL
      _giftScene = source._giftScene
      _giftBanner = source._giftBanner
      _triggerWords = source._triggerWords
      _giftBuffInfos = source._giftBuffInfos
      _forFirstRecharge = source._forFirstRecharge
      _dynamicImgForSelected = source._dynamicImgForSelected
      _afterSendAction = source._afterSendAction
      _giftOfflineTime = source._giftOfflineTime
      _topBarText = source._topBarText
      _topRightAvatar = source._topRightAvatar
      _bannerSchemeURL = source._bannerSchemeURL
      _isLocked = source._isLocked
      _reqExtraType = source._reqExtraType
      _assetIds = source._assetIds
      _giftPreviewInfo = source._giftPreviewInfo
      _giftTip = source._giftTip
      _needSweepLightCount = source._needSweepLightCount
      _groupInfo = source._groupInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._image) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._describe) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._notify) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._duration) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._id) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._fansclubInfo) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._forLinkmic) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._doodle) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._forFansclub) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._combo) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._type) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._diamondCount) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._isDisplayedOnPanel) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._primaryEffectID) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._giftLabelIcon) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._region) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._manual) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._forCustom) }()
        case 20: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: &_storage._specialEffects) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._icon) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._actionType) }()
        case 23: try { try decoder.decodeSingularInt32Field(value: &_storage._watermelonSeeds) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._goldEffect) }()
        case 25: try { try decoder.decodeRepeatedMessageField(value: &_storage._subs) }()
        case 26: try { try decoder.decodeSingularInt64Field(value: &_storage._goldenBeans) }()
        case 27: try { try decoder.decodeSingularInt64Field(value: &_storage._honorLevel) }()
        case 28: try { try decoder.decodeSingularInt32Field(value: &_storage._itemType) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._schemeURL) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._giftOperation) }()
        case 31: try { try decoder.decodeSingularStringField(value: &_storage._eventName) }()
        case 32: try { try decoder.decodeSingularInt64Field(value: &_storage._nobleLevel) }()
        case 33: try { try decoder.decodeSingularStringField(value: &_storage._guideURL) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._punishMedicine) }()
        case 35: try { try decoder.decodeSingularBoolField(value: &_storage._forPortal) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._businessText) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._cnyGift) }()
        case 38: try { try decoder.decodeSingularInt64Field(value: &_storage._appID) }()
        case 39: try { try decoder.decodeSingularInt64Field(value: &_storage._vipLevel) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._isGray) }()
        case 41: try { try decoder.decodeSingularStringField(value: &_storage._graySchemeURL) }()
        case 42: try { try decoder.decodeSingularInt64Field(value: &_storage._giftScene) }()
        case 43: try { try decoder.decodeSingularMessageField(value: &_storage._giftBanner) }()
        case 44: try { try decoder.decodeRepeatedStringField(value: &_storage._triggerWords) }()
        case 45: try { try decoder.decodeRepeatedMessageField(value: &_storage._giftBuffInfos) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._forFirstRecharge) }()
        case 47: try { try decoder.decodeSingularMessageField(value: &_storage._dynamicImgForSelected) }()
        case 48: try { try decoder.decodeSingularInt32Field(value: &_storage._afterSendAction) }()
        case 49: try { try decoder.decodeSingularInt64Field(value: &_storage._giftOfflineTime) }()
        case 50: try { try decoder.decodeSingularStringField(value: &_storage._topBarText) }()
        case 51: try { try decoder.decodeSingularMessageField(value: &_storage._topRightAvatar) }()
        case 52: try { try decoder.decodeSingularStringField(value: &_storage._bannerSchemeURL) }()
        case 53: try { try decoder.decodeSingularBoolField(value: &_storage._isLocked) }()
        case 54: try { try decoder.decodeSingularInt64Field(value: &_storage._reqExtraType) }()
        case 55: try { try decoder.decodeRepeatedInt64Field(value: &_storage._assetIds) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._giftPreviewInfo) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._giftTip) }()
        case 58: try { try decoder.decodeSingularInt32Field(value: &_storage._needSweepLightCount) }()
        case 59: try { try decoder.decodeRepeatedMessageField(value: &_storage._groupInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._describe.isEmpty {
        try visitor.visitSingularStringField(value: _storage._describe, fieldNumber: 2)
      }
      if _storage._notify != false {
        try visitor.visitSingularBoolField(value: _storage._notify, fieldNumber: 3)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 4)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 5)
      }
      try { if let v = _storage._fansclubInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._forLinkmic != false {
        try visitor.visitSingularBoolField(value: _storage._forLinkmic, fieldNumber: 7)
      }
      if _storage._doodle != false {
        try visitor.visitSingularBoolField(value: _storage._doodle, fieldNumber: 8)
      }
      if _storage._forFansclub != false {
        try visitor.visitSingularBoolField(value: _storage._forFansclub, fieldNumber: 9)
      }
      if _storage._combo != false {
        try visitor.visitSingularBoolField(value: _storage._combo, fieldNumber: 10)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 11)
      }
      if _storage._diamondCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._diamondCount, fieldNumber: 12)
      }
      if _storage._isDisplayedOnPanel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._isDisplayedOnPanel, fieldNumber: 13)
      }
      if _storage._primaryEffectID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._primaryEffectID, fieldNumber: 14)
      }
      try { if let v = _storage._giftLabelIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 16)
      }
      if !_storage._region.isEmpty {
        try visitor.visitSingularStringField(value: _storage._region, fieldNumber: 17)
      }
      if !_storage._manual.isEmpty {
        try visitor.visitSingularStringField(value: _storage._manual, fieldNumber: 18)
      }
      if _storage._forCustom != false {
        try visitor.visitSingularBoolField(value: _storage._forCustom, fieldNumber: 19)
      }
      if !_storage._specialEffects.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt64>.self, value: _storage._specialEffects, fieldNumber: 20)
      }
      try { if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      if _storage._actionType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._actionType, fieldNumber: 22)
      }
      if _storage._watermelonSeeds != 0 {
        try visitor.visitSingularInt32Field(value: _storage._watermelonSeeds, fieldNumber: 23)
      }
      if !_storage._goldEffect.isEmpty {
        try visitor.visitSingularStringField(value: _storage._goldEffect, fieldNumber: 24)
      }
      if !_storage._subs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subs, fieldNumber: 25)
      }
      if _storage._goldenBeans != 0 {
        try visitor.visitSingularInt64Field(value: _storage._goldenBeans, fieldNumber: 26)
      }
      if _storage._honorLevel != 0 {
        try visitor.visitSingularInt64Field(value: _storage._honorLevel, fieldNumber: 27)
      }
      if _storage._itemType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._itemType, fieldNumber: 28)
      }
      if !_storage._schemeURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._schemeURL, fieldNumber: 29)
      }
      try { if let v = _storage._giftOperation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      if !_storage._eventName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventName, fieldNumber: 31)
      }
      if _storage._nobleLevel != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nobleLevel, fieldNumber: 32)
      }
      if !_storage._guideURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._guideURL, fieldNumber: 33)
      }
      if _storage._punishMedicine != false {
        try visitor.visitSingularBoolField(value: _storage._punishMedicine, fieldNumber: 34)
      }
      if _storage._forPortal != false {
        try visitor.visitSingularBoolField(value: _storage._forPortal, fieldNumber: 35)
      }
      if !_storage._businessText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._businessText, fieldNumber: 36)
      }
      if _storage._cnyGift != false {
        try visitor.visitSingularBoolField(value: _storage._cnyGift, fieldNumber: 37)
      }
      if _storage._appID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._appID, fieldNumber: 38)
      }
      if _storage._vipLevel != 0 {
        try visitor.visitSingularInt64Field(value: _storage._vipLevel, fieldNumber: 39)
      }
      if _storage._isGray != false {
        try visitor.visitSingularBoolField(value: _storage._isGray, fieldNumber: 40)
      }
      if !_storage._graySchemeURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._graySchemeURL, fieldNumber: 41)
      }
      if _storage._giftScene != 0 {
        try visitor.visitSingularInt64Field(value: _storage._giftScene, fieldNumber: 42)
      }
      try { if let v = _storage._giftBanner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      } }()
      if !_storage._triggerWords.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._triggerWords, fieldNumber: 44)
      }
      if !_storage._giftBuffInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._giftBuffInfos, fieldNumber: 45)
      }
      if _storage._forFirstRecharge != false {
        try visitor.visitSingularBoolField(value: _storage._forFirstRecharge, fieldNumber: 46)
      }
      try { if let v = _storage._dynamicImgForSelected {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      } }()
      if _storage._afterSendAction != 0 {
        try visitor.visitSingularInt32Field(value: _storage._afterSendAction, fieldNumber: 48)
      }
      if _storage._giftOfflineTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._giftOfflineTime, fieldNumber: 49)
      }
      if !_storage._topBarText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._topBarText, fieldNumber: 50)
      }
      try { if let v = _storage._topRightAvatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      } }()
      if !_storage._bannerSchemeURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerSchemeURL, fieldNumber: 52)
      }
      if _storage._isLocked != false {
        try visitor.visitSingularBoolField(value: _storage._isLocked, fieldNumber: 53)
      }
      if _storage._reqExtraType != 0 {
        try visitor.visitSingularInt64Field(value: _storage._reqExtraType, fieldNumber: 54)
      }
      if !_storage._assetIds.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._assetIds, fieldNumber: 55)
      }
      try { if let v = _storage._giftPreviewInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._giftTip {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      if _storage._needSweepLightCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._needSweepLightCount, fieldNumber: 58)
      }
      if !_storage._groupInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._groupInfo, fieldNumber: 59)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftStruct, rhs: GiftStruct) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._image != rhs_storage._image {return false}
        if _storage._describe != rhs_storage._describe {return false}
        if _storage._notify != rhs_storage._notify {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._fansclubInfo != rhs_storage._fansclubInfo {return false}
        if _storage._forLinkmic != rhs_storage._forLinkmic {return false}
        if _storage._doodle != rhs_storage._doodle {return false}
        if _storage._forFansclub != rhs_storage._forFansclub {return false}
        if _storage._combo != rhs_storage._combo {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._diamondCount != rhs_storage._diamondCount {return false}
        if _storage._isDisplayedOnPanel != rhs_storage._isDisplayedOnPanel {return false}
        if _storage._primaryEffectID != rhs_storage._primaryEffectID {return false}
        if _storage._giftLabelIcon != rhs_storage._giftLabelIcon {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._region != rhs_storage._region {return false}
        if _storage._manual != rhs_storage._manual {return false}
        if _storage._forCustom != rhs_storage._forCustom {return false}
        if _storage._specialEffects != rhs_storage._specialEffects {return false}
        if _storage._icon != rhs_storage._icon {return false}
        if _storage._actionType != rhs_storage._actionType {return false}
        if _storage._watermelonSeeds != rhs_storage._watermelonSeeds {return false}
        if _storage._goldEffect != rhs_storage._goldEffect {return false}
        if _storage._subs != rhs_storage._subs {return false}
        if _storage._goldenBeans != rhs_storage._goldenBeans {return false}
        if _storage._honorLevel != rhs_storage._honorLevel {return false}
        if _storage._itemType != rhs_storage._itemType {return false}
        if _storage._schemeURL != rhs_storage._schemeURL {return false}
        if _storage._giftOperation != rhs_storage._giftOperation {return false}
        if _storage._eventName != rhs_storage._eventName {return false}
        if _storage._nobleLevel != rhs_storage._nobleLevel {return false}
        if _storage._guideURL != rhs_storage._guideURL {return false}
        if _storage._punishMedicine != rhs_storage._punishMedicine {return false}
        if _storage._forPortal != rhs_storage._forPortal {return false}
        if _storage._businessText != rhs_storage._businessText {return false}
        if _storage._cnyGift != rhs_storage._cnyGift {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._vipLevel != rhs_storage._vipLevel {return false}
        if _storage._isGray != rhs_storage._isGray {return false}
        if _storage._graySchemeURL != rhs_storage._graySchemeURL {return false}
        if _storage._giftScene != rhs_storage._giftScene {return false}
        if _storage._giftBanner != rhs_storage._giftBanner {return false}
        if _storage._triggerWords != rhs_storage._triggerWords {return false}
        if _storage._giftBuffInfos != rhs_storage._giftBuffInfos {return false}
        if _storage._forFirstRecharge != rhs_storage._forFirstRecharge {return false}
        if _storage._dynamicImgForSelected != rhs_storage._dynamicImgForSelected {return false}
        if _storage._afterSendAction != rhs_storage._afterSendAction {return false}
        if _storage._giftOfflineTime != rhs_storage._giftOfflineTime {return false}
        if _storage._topBarText != rhs_storage._topBarText {return false}
        if _storage._topRightAvatar != rhs_storage._topRightAvatar {return false}
        if _storage._bannerSchemeURL != rhs_storage._bannerSchemeURL {return false}
        if _storage._isLocked != rhs_storage._isLocked {return false}
        if _storage._reqExtraType != rhs_storage._reqExtraType {return false}
        if _storage._assetIds != rhs_storage._assetIds {return false}
        if _storage._giftPreviewInfo != rhs_storage._giftPreviewInfo {return false}
        if _storage._giftTip != rhs_storage._giftTip {return false}
        if _storage._needSweepLightCount != rhs_storage._needSweepLightCount {return false}
        if _storage._groupInfo != rhs_storage._groupInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftStruct.GiftStructFansClubInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GiftStruct.protoMessageName + ".GiftStructFansClubInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "minLevel"),
    2: .same(proto: "insertPos"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minLevel) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.insertPos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.minLevel, fieldNumber: 1)
    }
    if self.insertPos != 0 {
      try visitor.visitSingularInt32Field(value: self.insertPos, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftStruct.GiftStructFansClubInfo, rhs: GiftStruct.GiftStructFansClubInfo) -> Bool {
    if lhs.minLevel != rhs.minLevel {return false}
    if lhs.insertPos != rhs.insertPos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AssetEffectMixInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AssetEffectMixInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AssetEffectMixInfo, rhs: AssetEffectMixInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LuckyMoneyGiftMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LuckyMoneyGiftMeta"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LuckyMoneyGiftMeta, rhs: LuckyMoneyGiftMeta) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftPanelOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftPanelOperation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftPanelOperation, rhs: GiftPanelOperation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftBanner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftBanner"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftBanner, rhs: GiftBanner) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftBuffInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftBuffInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftBuffInfo, rhs: GiftBuffInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftPreviewInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftPreviewInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftPreviewInfo, rhs: GiftPreviewInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftTip: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftTip"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftTip, rhs: GiftTip) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GiftGroupInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GiftGroupInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GiftGroupInfo, rhs: GiftGroupInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EffectMixImageInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EffectMixImageInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EffectMixImageInfo, rhs: EffectMixImageInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
